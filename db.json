{"meta":{"version":1,"warehouse":"4.0.1"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.4.1.min.js","path":"js/jquery-3.4.1.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff2","path":"css/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1653964502575},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1653964510430},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"b608c1f1322760dce9805285a602a95832730a2e","modified":1653964511264},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"d2772ece6d4422ccdaa0359c3e07588834044052","modified":1653964511148},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"9a94875cbf4c27fbe2e63da0496242addc6d2876","modified":1653964511147},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1653964511265},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1653964511265},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1653964511266},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":1653964511266},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1653964511266},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":1653964511267},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1653964511267},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1653964511267},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":1653964511268},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1653964511268},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1653964511269},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1653964511269},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1653964511270},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":1653964511271},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":1653964511272},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1653964511273},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1653964510792},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1653964510887},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1653964510952},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":1653964510956},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1653964510967},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1653964510992},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1653964510969},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":1653964511111},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"414914ebb159fac1922b056b905e570ac7521925","modified":1653964510593},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"7cb70a7a54f8c7ae49b10d1f37c0a9b74eab8826","modified":1653964510683},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1653964510670},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"dfd555c00e85ffc4207c88968d12b219c1f086ec","modified":1653964510802},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":1653964510906},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":1653964510928},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":1653964510931},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"f215d92a882247a7cc5ea80b241bedfcec0ea6ca","modified":1653964510935},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"c1acd247e14588cdf101a69460cb8319c18cd078","modified":1653964510949},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1653964510961},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1653964510981},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1653964510768},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1653964510864},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":1653964510975},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1653964510988},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1653964510997},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1653964511181},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"581b0cbefdaa5f894922133989dd2d3bf71ded79","modified":1653964511182},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"9c451e5efd72c5bb8b56e8c2b94be731e99db05b","modified":1653964511204},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1653964510480},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"998ed4c5b147e1299bf62beebf33514474f28112","modified":1653964511143},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1653964510823},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1653964510921},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":1653964510897},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1653964510964},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1653964510986},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":1653964511001},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1653964511196},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1653964511198},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1653964511186},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"80759482d07063c091e940f964a1cf6693d3d406","modified":1653964511189},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1653964511191},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1653964511192},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1653964511196},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1653964511197},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1653964511199},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1653964511200},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1653964511201},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1653964511202},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1653964511139},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1653964511124},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1653964511257},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1653964511261},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1653964511172},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1653964511055},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1653964511251},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1653964511106},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1653964511236},{"_id":"public/2022/05/31/hello-world/index.html","hash":"69ea0d5ed1c04a9e513c7cf175eb53fd07110b00","modified":1653966830771},{"_id":"public/archives/index.html","hash":"019d7ee2755a9605eeb2c4a17b98a8d4acd10a09","modified":1653966830771},{"_id":"public/archives/2022/index.html","hash":"65965af21da86d453a15789afecd55518754cc3d","modified":1653966830771},{"_id":"public/archives/2022/05/index.html","hash":"3bd42c7a1c52371b8b5749962d0f6d5d2e2c1278","modified":1653966830771},{"_id":"public/index.html","hash":"fda7f4f3c6c3449182c582f9e869bca8b4bee5d7","modified":1653966830771},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1653964532806},{"_id":"public/js/script.js","hash":"998ed4c5b147e1299bf62beebf33514474f28112","modified":1653964532806},{"_id":"public/css/style.css","hash":"4da345d832a2682bcaee3ab3e22c15e3cd0e9cde","modified":1653964532806},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1653964532806},{"_id":"public/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1653964532806},{"_id":"public/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1653964532806},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1653964532806},{"_id":"public/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1653964532806},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1653964532806},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1653964532806},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1653964532806},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1653964532806},{"_id":"source/_posts/Redis设计与实现笔记.md","hash":"53e5b48347c85eb270ae1a3b2ca4bf8b13ac1c20","modified":1653966795771},{"_id":"source/.DS_Store","hash":"cc75fbdb977a72e3c33a32b977ec965c1597d5c5","modified":1653966731175},{"_id":"source/_posts/.DS_Store","hash":"73b49325032279a1eadb23ffe04179cede0c191d","modified":1653966731172},{"_id":"source/_posts/Redis设计与实现笔记/image-20211202191039403.png","hash":"67a378359cf77a8cc3f39e0e2aba6b0435c251e2","modified":1638443439000},{"_id":"source/_posts/Redis设计与实现笔记/image-20211229165905171.png","hash":"30bf9d2cbb6f6aeb19dfb9c79e053b3f198c35ce","modified":1640768345000},{"_id":"source/_posts/Redis设计与实现笔记/image-20220211103440892.png","hash":"7d0cb91a0801481fbcf1c3128e9be8d2a2f337c8","modified":1644546880000},{"_id":"source/_posts/Redis设计与实现笔记/image-20220211101931085.png","hash":"11762cc24138eea4c9d03b3f4bf5454505574841","modified":1644545971000},{"_id":"source/_posts/Redis设计与实现笔记/image-20220211105255896.png","hash":"5680cb11be4999ee14848302f33b5a9a39395371","modified":1644547975000},{"_id":"source/_posts/Redis设计与实现笔记/image-20220214173103894.png","hash":"08f46d19f1d26f3880d881cbb1093a7cf2b94d95","modified":1644831063000},{"_id":"source/_posts/Redis设计与实现笔记/image-20220214160841468.png","hash":"c3e99261dc142640094eb7ddbb8406495bb87488","modified":1644826121000},{"_id":"source/_posts/Redis设计与实现笔记/image-20220214173114253.png","hash":"96f1e65bbf53bc0a2c9a5aeaaa8cfd90c561d67f","modified":1644831074000},{"_id":"source/_posts/Redis设计与实现笔记/image-20220214173150948.png","hash":"4f98b7e6098dd775b72e08d81080063a98eaadf8","modified":1644831110000},{"_id":"source/_posts/Redis设计与实现笔记/image-20220214173130185.png","hash":"89d8647a5b5aef44626891c548b1a9c2f51a683e","modified":1644831090000},{"_id":"source/_posts/Redis设计与实现笔记/image-20210119113131809.png","hash":"1cba9c01fd63b13c2c1fd959bbfb72b0bfddcd36","modified":1611027091000},{"_id":"source/_posts/Redis设计与实现笔记/image-20211202194157363.png","hash":"8230cdc8951dc0331d7401d3ac9c2ac341fe2807","modified":1638445317000},{"_id":"source/_posts/Redis设计与实现笔记/image-20211202203910604.png","hash":"7369d5ccec4fe3e7477a46c3191b0150736c0bf0","modified":1638448750000},{"_id":"source/_posts/Redis设计与实现笔记/image-20211202205108963.png","hash":"65d81455df3db72e1c5ff964d1f86f4b1111847f","modified":1638449468000},{"_id":"source/_posts/Redis设计与实现笔记/image-20211208184915866.png","hash":"0b1e03d28dca6402b21ab633a8b56dfbc076ecda","modified":1638960555000},{"_id":"source/_posts/Redis设计与实现笔记/image-20211223123006023.png","hash":"dbf211037b1993107d43fac18744f2f6420426e9","modified":1640233806000},{"_id":"source/_posts/Redis设计与实现笔记/image-20211229155434918.png","hash":"ae0756fff8f9e55aaf437964c0cc24e421000444","modified":1640764474000},{"_id":"source/_posts/Redis设计与实现笔记/image-20211229155524869.png","hash":"2cafe59d298b640b69a844f0d3dc80e86d1272e3","modified":1640764524000},{"_id":"source/_posts/Redis设计与实现笔记/image-20211229172254874.png","hash":"c1638611d58351d9e4ca44d70dbe0e2ea10eb6ef","modified":1640769774000},{"_id":"source/_posts/Redis设计与实现笔记/image-20211229171224984.png","hash":"ea5cf02f211dd179f333f75e8f37f19e5992710c","modified":1640769144000},{"_id":"source/_posts/Redis设计与实现笔记/image-20211229171236860.png","hash":"395cada1594b69de9808216282e8666a93821fed","modified":1640769156000},{"_id":"source/_posts/Redis设计与实现笔记/image-20211230134214529.png","hash":"503600cfe2dc5c957f1ad70a4d60be420dcb32f9","modified":1640842934000},{"_id":"source/_posts/Redis设计与实现笔记/image-20201113165126442.png","hash":"dd5bb1f8d113a904321779532a9fd8b12172fd4f","modified":1605257486000},{"_id":"source/_posts/Redis设计与实现笔记/image-20211202193342716.png","hash":"f5ae9f5216aff96ad0f77ed3e44c0dfc8ea8c4f1","modified":1638444822000},{"_id":"source/_posts/Redis设计与实现笔记/image-20211221122226731.png","hash":"178d493764e3470992e800557dd633630bf1a091","modified":1640060546000},{"_id":"source/_posts/Redis设计与实现笔记/image-20211221123652853.png","hash":"f9fc5dcbed753e12e1fc1a502dec9ffe156e2746","modified":1640061412000},{"_id":"source/_posts/Redis设计与实现笔记/image-20211223122023914.png","hash":"a62e44bb5fe784fa005c21e59567aa7c31fc45b4","modified":1640233223000},{"_id":"source/_posts/Redis设计与实现笔记/image-20211224121242433.png","hash":"c17c5c78f05548be148fbca2537f4c0294da8f46","modified":1640319162000},{"_id":"source/_posts/Redis设计与实现笔记/image-20211229155905220.png","hash":"c40429c9a1fa0366202ce604c1c0a4b47301dc3b","modified":1640764745000},{"_id":"source/_posts/Redis设计与实现笔记/image-20211229162551584.png","hash":"4badeed3115a72970fcc50ece5ebabf2060cd335","modified":1640766351000},{"_id":"source/_posts/Redis设计与实现笔记/image-20211229170022876.png","hash":"6d52853fabaf2728b9920bc8e1ddafd4792a64ad","modified":1640768422000},{"_id":"source/_posts/Redis设计与实现笔记/image-20211230135001713.png","hash":"812b9b7be57b89b905fd907feaf85e0c239d5aab","modified":1640843401000},{"_id":"source/_posts/Redis设计与实现笔记/image-20211229172334212.png","hash":"a767da96efbafb1285a74b403022815b973f85d6","modified":1640769814000},{"_id":"source/_posts/Redis设计与实现笔记/image-20211230111446272.png","hash":"75402caafce97d95016801e8dc5926bbb2f95810","modified":1640834086000},{"_id":"source/_posts/Redis设计与实现笔记/image-20211230135250539.png","hash":"3df7d366c2327468a226766037a954116eae93d8","modified":1640843570000},{"_id":"source/_posts/Redis设计与实现笔记/image-20220108144031347.png","hash":"292572be798af000679bf1f968ce7ad553e1e3ce","modified":1641624031000},{"_id":"source/_posts/Redis设计与实现笔记/image-20220108154212058.png","hash":"13df591f90f6cf027b5ae09331c258862d3bb816","modified":1641627732000},{"_id":"source/_posts/Redis设计与实现笔记/image-20220104173927966.png","hash":"5e94814d6082e135911e77ce27c750446a5fa6c9","modified":1641289167000},{"_id":"source/_posts/Redis设计与实现笔记/image-20210119113212335.png","hash":"b20bd4a08bee5a9ee92a34090f1e91a0af2d917f","modified":1611027132000},{"_id":"source/_posts/Redis设计与实现笔记/image-20211202170134257.png","hash":"608628f3d0d4c3c85a8e0d98bf99065c618cdd85","modified":1638435694000},{"_id":"source/_posts/Redis设计与实现笔记/image-20211221123641387.png","hash":"5fd97b0da597094404a12a8e99d7517444e5251a","modified":1640061401000},{"_id":"source/_posts/Redis设计与实现笔记/image-20211223122749578.png","hash":"15d28505e0218a2a3beab1c9084b936fe7921755","modified":1640233669000},{"_id":"source/_posts/Redis设计与实现笔记/image-20211223123903740.png","hash":"2bee63e4211b6ead10ad81cafa4c0016a64e0c97","modified":1640234343000},{"_id":"source/_posts/Redis设计与实现笔记/image-20211230135125848.png","hash":"b01dc60fbecc958e28ab08093dcbc78d07212580","modified":1640843485000},{"_id":"source/_posts/Redis设计与实现笔记/image-20220210150401966.png","hash":"4e48612572f3e2d991868400a4864299e3bd11c4","modified":1644476641000},{"_id":"source/_posts/Redis设计与实现笔记/image-20201230160743472.png","hash":"b963f4d12bf601185afcf6b995665f0590908518","modified":1609315663000},{"_id":"source/_posts/Redis设计与实现笔记/image-20211202185257663.png","hash":"d1be683c24b25bc164063d09b06333ef3621e250","modified":1638442377000},{"_id":"source/_posts/Redis设计与实现笔记/image-20211220154003633.png","hash":"f3618faf65a6d8587a0b2851f0dd0c419fa2f394","modified":1639986003000},{"_id":"source/_posts/Redis设计与实现笔记/image-20211220161209485.png","hash":"113d96379ad26143ded017e94c2f4ddbb927c405","modified":1639987929000},{"_id":"source/_posts/Redis设计与实现笔记/image-20220108142751976.png","hash":"fadd64d37b55f39a37ebfb9e0ebd7de7163d789a","modified":1641623271000},{"_id":"source/_posts/Redis设计与实现笔记/image-20220108150821262.png","hash":"ef744121f8d613fe9ffc57529d5b5838253c56b4","modified":1641625701000},{"_id":"source/_posts/Redis设计与实现笔记/image-20220108144056270.png","hash":"ce45d3f705a0df76e688f3427c970a87707e61fb","modified":1641624056000},{"_id":"source/_posts/Redis设计与实现笔记/image-20201230160307956.png","hash":"c67d0c06fb62f7eb1d61e19de6f0a96738ceee0c","modified":1609315387000},{"_id":"source/_posts/Redis设计与实现笔记/image-20201230160316004.png","hash":"c67d0c06fb62f7eb1d61e19de6f0a96738ceee0c","modified":1609315396000},{"_id":"source/_posts/Redis设计与实现笔记/image-20211202191422661.png","hash":"cfa060f4f5843c92c1ab9a23feab72d4aa6c95bc","modified":1638443662000},{"_id":"source/_posts/Redis设计与实现笔记/image-20211202150726169.png","hash":"fb1163fa6738c9e2116428afd646b0cc3f09bee8","modified":1638428846000},{"_id":"source/_posts/Redis设计与实现笔记/image-20211230111504960.png","hash":"f6cf12611350be770b9f906b6d197cabbe1e8f77","modified":1640834104000},{"_id":"source/_posts/Redis设计与实现笔记/image-20220108150337037.png","hash":"a6fa4a004f835afb83e94bf9cbc80d40a708571a","modified":1641625417000},{"_id":"source/_posts/Redis设计与实现笔记/image-20211224123718806.png","hash":"21a1ecc1ee36c3b114adb8845a1734abb0c763a4","modified":1640320638000},{"_id":"source/_posts/Redis设计与实现笔记/image-20201023114439914.png","hash":"d09e8242bddb26edc65de7b5801b657b08eeb230","modified":1603424679000},{"_id":"source/_posts/Redis设计与实现笔记/image-20211227122435497.png","hash":"5468e8b887bc99a90fe084de9cea8dc521386a55","modified":1640579075000},{"_id":"source/_posts/Redis设计与实现笔记/image-20220104154001578.png","hash":"9b06ec6c241046fbee9fd4ad3bf63c2f4a7b9589","modified":1641282001000},{"_id":"source/_posts/Redis设计与实现笔记/image-20201120164829892.png","hash":"71f1eb2408eccfb2e31370a97452317677d71ac1","modified":1605862109000},{"_id":"source/_posts/Redis设计与实现笔记/image-20211223123242022.png","hash":"ae603b04b97eda1c437b600a902cee5e3591635f","modified":1640233962000},{"_id":"source/_posts/Redis设计与实现笔记/image-20220210150414107.png","hash":"47075c8551166a2c0dc44ff5ed5a18e7985542fe","modified":1644476654000},{"_id":"source/_posts/Redis设计与实现笔记/image-20211221124016092.png","hash":"5f8c536129b8b9e0d08c0bbe2e92a3afca683597","modified":1640061616000},{"_id":"source/_posts/Redis设计与实现笔记/image-20211202194131682.png","hash":"ebb226ebef26b1209375b0475a29acd2138fcb68","modified":1638445291000},{"_id":"source/_posts/Redis设计与实现笔记/image-20211203145155173.png","hash":"7d190f42d438077707959a22265165b4289329b4","modified":1638514315000},{"_id":"source/_posts/Redis设计与实现笔记/image-20211203145138396.png","hash":"7d190f42d438077707959a22265165b4289329b4","modified":1638514298000},{"_id":"source/_posts/Redis设计与实现笔记/image-20220104152818310.png","hash":"6e89995a5348f297f38316edff88899d09120708","modified":1641281298000},{"_id":"source/_posts/Redis设计与实现笔记/image-20211202185212577.png","hash":"47df5aa0e2251ff04da2d6a9ae0493530a437ce9","modified":1638442332000},{"_id":"source/_posts/Redis设计与实现笔记/image-20211223121705566.png","hash":"2938a0f5339100c151dadf476b843ad17c9b3423","modified":1640233025000},{"_id":"source/_posts/Redis设计与实现笔记/image-20211202161622629.png","hash":"c7036cf0407d4ce37e13c68c715addb3b82e29eb","modified":1638432982000},{"_id":"source/_posts/Redis设计与实现笔记/image-20211202164116327.png","hash":"fa23174264c760fa03b7e729f69b3e00192c54e6","modified":1638434476000},{"_id":"source/_posts/Redis设计与实现笔记/image-20211223124409476.png","hash":"3482e21fc83360ba266f1c626e2eb9831b52d064","modified":1640234649000},{"_id":"source/_posts/Redis设计与实现笔记/image-20210407135357196.png","hash":"2bdc547e0616421c9c7c89d0740d5a996373468c","modified":1617774837000},{"_id":"source/_posts/Redis设计与实现笔记/image-20211227121308325.png","hash":"69199cc10dee452c8af3d4659ddf4580ca043466","modified":1640578388000},{"_id":"source/_posts/Redis设计与实现笔记/image-20211227121109237.png","hash":"69199cc10dee452c8af3d4659ddf4580ca043466","modified":1640578269000},{"_id":"source/_posts/Redis设计与实现笔记/image-20211221124137128.png","hash":"8396bdb88809fac93a2f4bb86784e9b66ce8efd1","modified":1640061697000},{"_id":"source/_posts/Redis设计与实现笔记/image-20211223123127507.png","hash":"4abe04afaa320df68ff30a9fcddefe33dd54cfcb","modified":1640233887000},{"_id":"source/_posts/Redis设计与实现笔记/image-20211224121749819.png","hash":"fa79195f891e5656d8eb6947a22018421df8fdc8","modified":1640319469000},{"_id":"source/_posts/Redis设计与实现笔记/image-20211224121349312.png","hash":"fa79195f891e5656d8eb6947a22018421df8fdc8","modified":1640319229000},{"_id":"source/_posts/Redis设计与实现笔记/image-20210706150117509.png","hash":"ec59373207a3ec2c536e37becbc688fe38890c04","modified":1625554877000},{"_id":"source/_posts/Redis设计与实现笔记/image-20211223123845793.png","hash":"694ecff7385183d8e5b2b939d3251f6111ea0428","modified":1640234325000},{"_id":"public/2022/05/31/Redis设计与实现笔记/index.html","hash":"42b221509ac683bdc687c7e566bd341f7dc9d0ed","modified":1653966830771}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2022-05-31T02:35:02.575Z","updated":"2022-05-31T02:35:02.575Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3tjs1er0000d86a57li3e91","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"_content":"## 数据结构\n\n### 简单动态字符串\n\nSDS跟C语言一样是个char字符数组；\n\n一个sds对象有free、len属性记录空余空间和当前字符串长度\n\n#### 示例图\n\n![image-20211221122226731](./Redis设计与实现笔记/image-20211221122226731.png)\n\n#### 特点\n\n- **常数复杂度获取字符串长度**\n  直接从free、len属性获取\n\n- **杜绝缓冲区溢出**\n  C语言字符串拼接时都假定分配的内存足够，如果这个假定不成立就会产生缓冲区溢出；\n  当SDS API需要对SDS进行修改时，API会先检查SDS的空间是否满足修改所需的要求，如果不满足的话，**API会自动将SDS的空间扩展至执行修改所需的大小**，然后才执行实际的修改操作，所以使用SDS既不需要手动修改SDS的空间大小，也不会出现前面所说的缓冲区溢出问题\n\n- **减少修改字符串时带来的内存重分配次数**\n\n  有两种手段：\n\n  1. 空间预分配\n     扩容的时候，会比所需的内存多分配一部分空闲内存（有两种公示决定额外分配多少内存）\n\n  2. 惰性空间释放\n\n     sds字符串缩短之后，内存不是马上回收，而是作为空闲内存保存\n\n- **二进制安全**\n\n  C字符串中的字符必须符合某种编码（比如ASCII）；sds没有这个限制；\n\n- **兼容部分C字符串函数**\n\n  如果我们有一个保存文本数据的SDS值sds，那么我们就可以重用＜string.h＞/strcasecmp函数，使用它来对比SDS保存的字符串和另一个C字符串：\n\n### 链表\n\n#### 示例图\n\n![image-20211221123652853](./Redis设计与实现笔记/image-20211221123652853.png)\n\n#### 特点\n\n- 双端\n- 无环\n- 带表头、表尾指针\n- 带长度计数器\n- 多态；可以保存不通类型的值\n\n### 字典\n\n#### 示例图\n\n![image-20211221124137128](./Redis设计与实现笔记/image-20211221124137128.png)\n\nht属性是一个包含两个项的数组，数组中的每个项都是一个dictht哈希表，一般情况下，字典只使用ht[0]哈希表，ht[1]哈希表只会在对ht[0]哈希表进行rehash时使用。\n\n#### 扩容\n\n1. 服务器目前没有在执行BGSAVE命令或者BGREWRITEAOF命令，并且哈希表的负载因子大于等于1。\n\n2. 服务器目前正在执行BGSAVE命令或者BGREWRITEAOF命令，并且哈希表的负载因子大于等于5。\n\n#### 收缩\n\n当哈希表的负载因子小于0.1时，程序自动开始对哈希表执行收缩操作。\n\n#### 渐进式rehash\n\n以下是哈希表渐进式rehash的详细步骤：\n\n1）为ht[1]分配空间，让字典同时持有ht[0]和ht[1]两个哈希表。\n\n2）在字典中维持一个索引计数器变量rehashidx，并将它的值设置为0，表示rehash工作正式开始。\n\n3）在rehash进行期间，每次对字典执行添加、删除、查找或者更新操作时，程序除了执行指定的操作以外，还会顺带将ht[0]哈希表在rehashidx索引上的所有键值对rehash到ht[1]，当rehash工作完成之后，程序将rehashidx属性的值增一。\n\n4）随着字典操作的不断执行，最终在某个时间点上，ht[0]的所有键值对都会被rehash至ht[1]，这时程序将rehashidx属性的值设为-1，表示rehash操作已完成。\n\n渐进式rehash的好处在于它采取分而治之的方式，将rehash键值对所需的计算工作均摊到对字典的每个添加、删除、查找和更新操作上，从而避免了集中式rehash而带来的庞大计算量。\n\n另外，在渐进式rehash执行期间，新添加到字典的键值对一律**会被保存到ht[1]**里面，而ht[0]则不再进行任何添加操作，这一措施保证了ht[0]包含的键值对数量会只减不增，并随着rehash操作的执行而最终变成空表。\n\n### 跳跃表\n\n#### 示例图\n\n![image-20211223121705566](./Redis设计与实现笔记/image-20211223121705566.png)\n\nRedis只在两个地方用到了跳跃表，一个是实现有序集合键，另一个是在集群节点中用作内部数据结构。\n\n每个跳跃表节点的层高都是1至32之间的随机数\n\n### 整数集合\n\n整数集合（intset）是集合键的底层实现之一，当一个集合**只包含整数值元素**，并且这个集合的**元素数量不多**时，Redis就会使用整数集合作为集合键的底层实现。\n\n#### 示例图\n\n![image-20211223122023914](./Redis设计与实现笔记/image-20211223122023914.png)\n\n当向一个底层为int16_t数组的整数集合添加一个int64_t类型的整数值时，整数集合已有的所有元素都会被转换成int64_t类型\n\n#### 升级\n\n类型：int16_t，int32_t，int64_t\n\n当向一个底层为int16_t数组的整数集合添加一个int64_t类型的整数值时，整数集合已有的所有元素都会被转换成int64_t类型；\n\n整数集合**不支持降级**操作，一旦对数组进行了升级，编码就会一直保持升级后的状态。\n\n**好处**：整数集合的升级策略有两个好处，一个是提升整数集合的灵活性，另一个是尽可能地节约内存。\n\n### 压缩列表\n\n压缩列表（ziplist）是列表键和哈希键的底层实现之一。当一个列表键只包含少量列表项，并且每个列表项要么就是小整数值，要么就是长度比较短的字符串，那么Redis就会使用压缩列表来做列表键的底层实现\n\n#### 示例图\n\n![image-20211223122749578](./Redis设计与实现笔记/image-20211223122749578.png)\n\n![image-20211223123006023](./Redis设计与实现笔记/image-20211223123006023.png)\n\n#### 连锁更新\n\n每个节点的previous_entry_length属性都记录了前一个节点的长度：\n\n❑如果前一节点的长度小于254字节，那么previous_entry_length属性需要用1字节长的空间来保存这个长度值。\n\n❑如果前一节点的长度大于等于254字节，那么previous_entry_length属性需要用5字节长的空间来保存这个长度值。\n\n![image-20211223123127507](./Redis设计与实现笔记/image-20211223123127507.png)\n\n![image-20211223123242022](./Redis设计与实现笔记/image-20211223123242022.png)\n\n### 对象\n\nRedis的对象系统还实现了基于引用计数技术的内存回收机制，当程序不再使用某个对象的时候，这个对象所占用的内存就会被自动释放；\n\n#### 结构\n\n![image-20211223123903740](./Redis设计与实现笔记/image-20211223123903740.png)\n\n![image-20211223123845793](./Redis设计与实现笔记/image-20211223123845793.png)\n\n#### 共享对象\n\nRedis只对包含整数值的字符串对象进行共享。\n\n![image-20211223124409476](./Redis设计与实现笔记/image-20211223124409476.png)\n\n假设键A创建了一个包含整数值100的字符串对象作为值对象，如果这时键B也要创建一个同样保存了整数值100的字符串对象作为值对象，那么服务器让键A和键B共享同一个字符串对象；\n\nRedis会在初始化服务器时，创建一万个字符串对象，这些对象包含了从0到9999的所有整数值，当服务器需要用到值为0到9999的字符串对象时，服务器就会使用这些共享对象，而不是新创建对象。\n\n# 第二部分：单机数据库的实现\n\n## 数据库\n\n#### 示例图\n\n![image-20211224121242433](./Redis设计与实现笔记/image-20211224121242433.png)\n\n![image-20211224121349312](./Redis设计与实现笔记/image-20211224121349312.png)\n\n#### 过期时间\n\n保存过期时间\n\nredisDb结构的expires字典保存了数据库中所有键的过期时间，我们称这个字典为过期字典：\n\n❑过期字典的键是一个指针，这个指针指向键空间中的某个键对象（也即是某个数据库键）。\n\n❑过期字典的值是一个long long类型的整数，这个整数保存了键所指向的数据库键的过期时间——一个毫秒精度的UNIX时间戳。\n\n##### 过期键删除策略\n\nRedis服务器实际使用的是**惰性删除**和**定期删除**两种策略：通过配合使用这两种删除策略，服务器可以很好地在合理使用CPU时间和避免浪费内存空间之间取得平衡。\n\n- 惰性删除\n\n  操作键的时候判断一下键是否过期，如果过期了则删除键，并且按照键不存在的方式处理命令\n\n- 定期删除\n  过期键的定期删除策略由redis.c/activeExpireCycle函数实现，每当Redis的服务器周期性操作redis.c/serverCron函数执行时，activeExpireCycle函数就会被调用，**它在规定的时间内，分多次遍历服务器中的各个数据库**，从数据库的expires字典中**随机**检查一部分键的过期时间，并删除其中的过期键。\n\n##### AOF、RDB和复制功能对过期键的处理\n\n-  生成RDB文件\n  在执行SAVE命令或者BGSAVE命令创建一个新的RDB文件时，程序会对数据库中的键进行检查，**已过期的键不会被保存**到新创建的RDB文件中。\n\n- 载入RDB文件\n\n  如果服务器以主服务器模式运行，那么在载入RDB文件时，程序会对文件中保存的键进行检查，未过期的键会被载入到数据库中，而**过期键则会被忽略，所以过期键对载入RDB文件的主服务器不会造成影响**。如果是从服务器模式的话会**所有键都载入**，但是因为进行数据同步的时候从服务器的数据库会被清空，所以不会对数据库造成影响。\n\n- AOF文件写入\n  当过期键被惰性删除或者定期删除之后，程序会向AOF文件追加（append）一条DEL命令，来显式地记录该键已被删除。\n\n- AOF重写\n  和生成RDB文件时类似，在执行AOF重写的过程中，程序会对数据库中的键进行检查，**已过期的键不会被保存到重写后的AOF文件中。**\n\n- 复制\n  主服务器在删除一个过期键之后，会显式地向所有从服务器发送一个DEL命令，告知从服务器删除这个过期键。从服务器只有在接到主服务器发来的DEL命令之后，才会删除过期键。\n\n## RDB持久化\n\nRDB文件是一个经过压缩的二进制文件，由多个部分组成\n\n有两个Redis命令可以用于生成RDB文件，一个是SAVE，另一个是BGSAVE。\n\n- SAVE\n  SAVE命令会阻塞Redis服务器进程，直到RDB文件创建完毕为止，在服务器进程阻塞期间，服务器不能处理任何命令请求\n\n- BGSAVE\n  BGSAVE命令会派生出一个子进程，然后由子进程负责创建RDB文件，服务器进程（父进程）继续处理命令请求\n\n### RDB载入\n\n启动的时候自动载入\n\n如果服务器开启了AOF持久化功能，那么服务器会**优先使用AOF文件**来还原数据库状态。只有在AOF持久化功能处于关闭状态时，服务器才会使用RDB文件来还原数据库状态。\n\n### 自动保存\n\n因为BGSAVE命令可以在不阻塞服务器进程的情况下执行，所以Redis允许用户通过设置服务器配置的save选项，让服务器每隔一段时间自动执行一次BGSAVE命令。\n\n![image-20211224123718806](./Redis设计与实现笔记/image-20211224123718806.png)\n\n#### 实现方式\n\n数据库维护dirty计数器和lastsave属性\n\nRedis的服务器周期性操作函数**serverCron**默认每隔100毫秒就会执行一次，该函数用于对正在运行的服务器进行维护，它的其中一项工作就是检查save选项所设置的保存条件是否已经满足，如果满足的话，就执行BGSAVE命令。\n\n## AOF持久化\n\n### AOF文件的写入与同步\n\n因为服务器在处理文件事件时可能会执行写命令，使得一些内容被追加到aof_buf缓冲区里面，所以在服务器每次结束一个事件循环之前，它都会调用fushAppendOnlyFile函数，考虑是否需要将aof_buf缓冲区中的内容写入和保存到AOF文件里面\n\n![image-20211227121109237](./Redis设计与实现笔记/image-20211227121109237.png)\n\n### AOF文件的载入与数据还原\n\nRedis读取AOF文件并还原数据库状态的详细步骤如下：\n\n1）创建一个不带网络连接的伪客户端（fake client）\n\n2）从AOF文件中分析并读取出一条写命令。\n\n3）使用伪客户端执行被读出的写命令。\n\n4）一直执行步骤2和步骤3，直到AOF文件中的所有写命令都被处理完毕为止。\n\n### AOF重写\n\n虽然Redis将生成新AOF文件替换旧AOF文件的功能命名为“AOF文件重写”，但实际上，AOF文件重写并不需要对现有的AOF文件进行任何读取、分析或者写入操作，这个功能是通过读取服务器当前的数据库状态来实现的。\n\n首先从数据库中读取键现在的值，然后用一条命令去记录键值对，代替之前记录这个键值对的多条命令，这就是AOF重写功能的实现原理。\n\n### AOF后台重写\n\nRedis不希望AOF重写造成服务器无法处理请求，所以Redis决定将AOF重写程序放到子进程里执行。\n\n子进程在重写期间，父进程还在接收命令，会出现数据不一致的情况。为了解决这种数据不一致问题，Redis服务器设置了一个AOF重写缓冲区，这个缓冲区在服务器创建子进程之后开始使用，当Redis服务器执行完一个写命令之后，它会同时将这个写命令发送给AOF缓冲区和AOF重写缓冲区。\n\n当子进程完成AOF重写工作之后，它会向父进程发送一个信号，父进程在接到该信号之后，会调用一个信号处理函数，并执行以下工作：\n\n1. 将AOF重写缓冲区中的所有内容写入到新AOF文件中，这时新AOF文件所保存的数据库状态将和服务器当前的数据库状态一致。\n2. 对新的AOF文件进行改名，原子地（atomic）覆盖现有的AOF文件，完成新旧两个AOF文件的替换。\n\n## 事件\n\nRedis服务器是一个事件驱动程序，服务器需要处理以下两类事件：\n\n- 文件事件（file event）：Redis服务器通过套接字与客户端（或者其他Redis服务器）进行连接，而文件事件就是服务器对套接字操作的抽象。服务器与客户端（或者其他服务器）的通信会产生相应的文件事件，而服务器则通过监听并处理这些事件来完成一系列网络通信操作。\n\n- 时间事件（time event）：Redis服务器中的一些操作（比如serverCron函数）需要在给定的时间点执行，而时间事件就是服务器对这类定时操作的抽象。\n\n### 文件事件\n\n![image-20211227122435497](./Redis设计与实现笔记/image-20211227122435497.png)\n\n尽管多个文件事件可能会并发地出现，但I/O多路复用程序总是会将所有产生事件的套接字都放到一个队列里面，然后通过这个队列，以有序（sequentially）、同步（synchronously）、每次一个套接字的方式向文件事件分派器传送套接字\n\n#### 文件事件的处理器\n\nRedis为文件事件编写了多个处理器，这些事件处理器分别用于实现不同的网络通信需求，比如说：\n\n- 为了对连接服务器的各个客户端进行应答，服务器要为监听套接字关联**连接应答处理器**。\n  当**Redis服务器进行初始化**的时候，程序会将这个连接应答处理器和服务器监听套接字的**AE_READABLE**事件关联起来，当有客户端用sys/socket.h/connect函数连接服务器监听套接字的时候，套接字就会产生AE_READABLE事件，引发连接应答处理器执行，并执行相应的套接字应答操作。\n\n- 为了接收客户端传来的命令请求，服务器要为客户端套接字关联**命令请求处理器**。\n  当一个客户端**通过连接应答处理器成功连接到服务器**之后，服务器会将客户端套接字的**AE_READABLE**事件和命令请求处理器关联起来，当客户端向服务器发送命令请求的时候，套接字就会产生AE_READABLE事件，引发命令请求处理器执行，并执行相应的套接字读入操作。在客户端连接服务器的整个过程中，服务器都会一直为客户端套接字的AE_READABLE事件关联命令请求处理器。\n\n- 为了向客户端返回命令的执行结果，服务器要为客户端套接字关联**命令回复处理器**。\n  当**服务器有命令回复需要传送给客户端的时候**，服务器会将客户端套接字的AE_WRITABLE事件和命令回复处理器关联起来，当客户端准备好接收服务器传回的命令回复时，就会产生AE_WRITABLE事件，引发命令回复处理器执行，并执行相应的套接字写入操作。当服务器有命令回复需要传送给客户端的时候，服务器会将客户端套接字的AE_WRITABLE事件和命令回复处理器关联起来。当命令回复发送完毕之后，服务器就会**解除**命令回复处理器与客户端套接字的AE_WRITABLE事件之间的关联。\n\n- 当主服务器和从服务器进行复制操作时，主从服务器都需要关联特别为复制功能编写的复制处理器。\n\n### 时间事件\n\nRedis的时间事件分为以下两类：\n\n- 定时事件：让一段程序在指定的时间之后执行一次。比如说，让程序X在当前时间的30毫秒之后执行一次。\n\n- 周期性事件：让一段程序每隔指定时间就执行一次。比如说，让程序Y每隔30毫秒就执行一次。\n\n目前版本的Redis只使用周期性事件，而没有使用定时事件。\n\n#### 实现\n\n服务器将所有时间事件都放在一个无序链表中，每当时间事件执行器运行时，它就**遍历整个链表**，查找所有已到达的时间事件，并调用相应的事件处理器。\n\n在目前版本中，正常模式下的Redis服务器只使用serverCron一个时间事件，在这种情况下，服务器几乎是将**无序链表退化成一个指针来使用**，所以使用无序链表来保存时间事件，**并不影响事件执行的性能**。\n\n## 客户端\n\nRedis通过使用由I/O多路复用技术实现的文件事件处理器，Redis服务器使用单线程单进程的方式来处理命令请求，并与多个客户端进行网络通信。\n\nRedis服务器状态结构的clients属性是一个链表，这个链表保存了所有与服务器连接的客户端的状态结构，对客户端执行批量操作，或者查找某个指定的客户端，都可以通过遍历clients链表来完成。\n\n### 属性\n\n1. 客户端的套接字描述符。\n2. 客户端的名字。\n3. 客户端的标志值（fag）。\n4. 指向客户端正在使用的数据库的指针，以及该数据库的号码。\n5. 客户端当前要执行的命令、命令的参数、命令参数的个数，以及指向命令实现函数的指针。\n6. 客户端的输入缓冲区和输出缓冲区。\n7. 客户端的复制状态信息，以及进行复制所需的数据结构。\n8. 客户端执行BRPOP、BLPOP等列表阻塞命令时使用的数据结构。\n9. 客户端的事务状态，以及执行WATCH命令时用到的数据结构。\n10. 客户端执行发布与订阅功能时用到的数据结构。\n11. 客户端的身份验证标志。\n12. 客户端的创建时间，客户端和服务器最后一次通信的时间，以及客户端的输出缓冲区大小超出软性限制（soft limit）的时间。\n\n### 示例图\n\n![image-20220108142751976](./Redis设计与实现笔记/image-20220108142751976.png)\n\n### 注意\n\n通常情况下，Redis只会将那些对数据库进行了修改的命令写入到AOF文件，并复制到各个从服务器。如果一个命令没有对数据库进行任何修改，那么它就会被认为是只读命令，这个命令不会被写入到AOF文件，也不会被复制到从服务器。\n\n以上规则适用于绝大部分Redis命令，但PUBSUB命令和SCRIPT LOAD命令是其中的例外。PUBSUB命令虽然没有修改数据库，但PUBSUB命令向频道的所有订阅者发送消息这一行为带有副作用，接收到消息的所有客户端的状态都会因为这个命令而改变。因此，服务器需要使用REDIS_FORCE_AOF标志，强制将这个命令写入AOF文件，这样在将来载入AOF文件时，服务器就可以再次执行相同的PUBSUB命令，并产生相同的副作用。\n\n### 伪客户端\n\n1. Lua\n\n   lua_client伪客户端在服务器运行的整个生命期中会一直存在，只有服务器被关闭时，这个客户端才会被关闭。\n\n2. 载入AOF文件\n\n   服务器在载入AOF文件时，会创建用于执行AOF文件包含的Redis命令的伪客户端，并在载入完成之后，关闭这个伪客户端。\n\n## 服务器\n\n### 命令请求的执行过程（重要）\n\n1. 发送命令请求\n\n   ![image-20220108144056270](./Redis设计与实现笔记/image-20220108144056270.png)\n\n2. 读取命令请求\n   当客户端与服务器之间的**连接套接字**因为客户端的写入而变得**可读**时，服务器将调用**命令请求处理器**来执行以下操作：\n\n   - 读取套接字中协议格式的命令请求，并将其保存到客户端状态的**输入缓冲区**里面。\n   - 对输入缓冲区中的命令请求进行**分析**，提取出命令请求中包含的**命令参数**，以及命令参数的个数，然后分别将参数和参数个数保存到客户端状态的argv属性和argc属性里面。\n   - 调用**命令执行器**，执行客户端指定的命令。\n\n   命令执行器：\n\n   - 去命令表查找**命令的实现函数**\n   - 执行预备操作：\n     1. 检查参数是否正确； \n     2. 检查身份是否验证； \n     3. 检查内存使用情况\n     4. 检查是否在订阅模式，如果是，只会接收SUBSCRIBE、PSUBSCRIBE、UNSUBSCRIBE、PUNSUBSCRIBE四个命令\n     5. 检查是否在Lua脚本阻塞状态，如果是则拒绝命令\n     6. 检查是否在执行事务，如果是则只会执行EXEC、DISCARD、MULTI、WATCH四个命令\n     7. 检查服务器是否在进行数据载入，如果是则客户端发送的命令必须带有l标识（比如INFO、SHUTDOWN、PUBLISH等等）才会被服务器执行\n   - 调用**命令的实现函数**，并将结果放在输出缓冲区\n   - 执行后续工作\n     1. 记录慢查询日志\n     2. 记录aop文件\n     3. 如果有从服务器复制这个服务器，则会执行命令传播给所有从服务器\n     4. 记录调用次数\n\n3. 将命令回复给客户端\n   当客户端套接字变为**可写状态**时，服务器就会执行**命令回复处理器**，将保存在客户端**输出缓冲区**中的命令回复发送给客户端。\n\n4. 客户端打印回复内容\n\n### serverCron函数\n\n每100ms运行一次\n\n#### 作用：\n\n1. 更新服务器时间缓存\n   避免每次获取时间的时候都执行系统调用，直接在内存中维护了时间\n2. 更新服务器每秒执行的次数\n3. 更新服务器内存峰值记录\n4. 处理SIGTERM信号\n5. 管理客户端资源\n   如果客户端链接超时则会释放这个客户端；如果输入缓冲区的大小超过了一定的长度，则会释放当前的输入缓冲区，并重新创建一个，以防客户端的输入缓冲区耗费太多内存。\n6. 管理数据库资源\n   删除过期键\n7. 执行被延迟的BGREWRITEAOF\n8. 将AOF缓冲区中的内容写入AOF文件\n9. 关闭异步客户端\n\n### 初始化服务器\n\n一个Redis服务器从启动到能够接受客户端的命令请求，需要经过一系列的初始化和设置过程，比如初始化服务器状态，接受用户指定的服务器配置，创建相应的数据结构和网络连接等等。\n\n# 第三部分：多机数据库的实现\n\n## 复制\n\n在Redis中，用户可以通过执行SLAVEOF命令或者设置slaveof选项，让一个服务器去复制（replicate）另一个服务器，我们称呼被复制的服务器为主服务器（master），而对主服务器进行复制的服务器则被称为从服务器（slave）。\n\n#### 旧版复制功能\n\nRedis的复制功能分为**同步**（sync）和**命令传播**（command propagate）两个操作：\n\n##### 同步\n\n从服务器对主服务器的同步操作需要通过向主服务器发送**SYNC命令**来完成，以下是SYNC命令的执行步骤：\n\n1. 从服务器向主服务器发送SYNC命令。\n2. 收到SYNC命令的主服务器执行BGSAVE命令，在**后台**生成一个RDB文件，并使用一个**缓冲区记录从现在开始执行的所有写命令**。\n3. 当主服务器的BGSAVE命令执行完毕时，主服务器会将BGSAVE命令生成的RDB文件发送给从服务器，从服务器接收并载入这个RDB文件，将自己的数据库状态更新至主服务器执行BGSAVE命令时的数据库状态。\n4. 主服务器将记录在缓冲区里面的所有写命令发送给从服务器，从服务器执行这些写命令，将自己的数据库状态更新至主服务器数据库当前所处的状态。\n\n![image-20220108150337037](./Redis设计与实现笔记/image-20220108150337037.png)\n\n##### 命令传播\n\n为了让主从服务器再次回到一致状态，主服务器需要对从服务器执行命令传播操作：主服务器会将自己执行的写命令，也即是造成主从服务器不一致的那条写命令，发送给从服务器执行，当从服务器执行了相同的写命令之后，主从服务器将再次回到一致状态。\n\n##### 缺陷\n\nSYNC命令是一个非常耗费资源的操作（主服务器需要生成RDB文件，从服务器需要载入RDB文件，网络需要传输RDB文件）；当从服务器断线重连之后，需要通过SYNC从头同步整个数据库。\n\n#### 新版复制功能\n\n使用PSYNC命令代替SYNC命令来执行复制时的同步操作。PSYNC命令具有完整重同步（full resynchronization）和部分重同步（partialresynchronization）两种模式。\n\n##### 完整重同步\n\n用于初次复制的情况\n\n##### 部分重同步\n\n主服务器维护一个固定长度的**复制积压缓冲区**\n\n从服务器断线重新复制的时候，告诉主服务器复制的偏移量，主服务器如果发现断线期间新增的数据还在**复制积压缓冲区**中，则会执行部分重同步，否则执行完整重同步。\n\n![image-20220108150821262](./Redis设计与实现笔记/image-20220108150821262.png)\n\n## Sentinel\n\nSentinel（哨岗、哨兵）是Redis的**高可用性**（high availability）解决方案：由一个或多个Sentinel实例（instance）组成的Sentinel系统（system）可以监视任意多个主服务器，以及这些主服务器属下的所有从服务器，并在被监视的主服务器进入下线状态时，自动将下线主服务器属下的某个从服务器升级为新的主服务器，然后由新的主服务器代替已下线的主服务器继续处理命令请求。\n\n### 启动\n\n#### 启动并初始化Sentinel\n\n1. 首先，因为Sentinel本质上只是一个运行在特殊模式下的Redis服务器，所以启动Sentinel的第一步，就是初始化一个普通的Redis服务器。\n\n2. 启动Sentinel的第二个步骤就是将一部分普通Redis服务器使用的代码替换成Sentinel专用代码\n3. 在应用了Sentinel的专用代码之后，接下来，服务器会初始化一个sentinel.c/sentinelState结构（后面简称“Sentinel状态”），这个结构保存了服务器中所有和Sentinel功能有关的状\n4. 初始化Sentinel状态的masters属性\n5. 初始化Sentinel的最后一步是创建连向被监视主服务器的网络连接，Sentinel将成为主服务器的客户端，它可以向主服务器发送命令，并从命令回复中获取相关的信息。\n\n#### 获取主服务器的信息\n\nSentinel默认会以每十秒一次的频率，通过命令连接向被监视的主服务器发送INFO命令，并通过分析INFO命令的回复来获取主服务器的当前信息。\n\n#### 获取从服务器的信息\n\n当Sentinel发现主服务器有新的从服务器出现时，Sentinel除了会为这个新的从服务器创建相应的实例结构之外，Sentinel还会创建连接到从服务器的命令连接和订阅连接。在创建命令连接之后，Sentinel在默认情况下，会以每十秒一次的频率通过命令连接向从服务器发送INFO命令。\n\n#### 向主服务器和从服务器发送信息\n\n在默认情况下，Sentinel会以每两秒一次的频率，通过命令连接向所有被监视的主服务器和从服务器发送命令告诉监视的服务器自己的信息。\n\n#### 接收来自主服务器和从服务器的频道信息\n\n对于每个与Sentinel连接的服务器，Sentinel既通过命令连接向服务器的__sentinel__:hello频道发送信息，又通过订阅连接从服务器的__sentinel__:hello频道接收信息。\n\n对于监视同一个服务器的多个Sentinel来说，一个Sentinel发送的信息会被其他Sentinel接收到，这些信息会被用于更新其他Sentinel对发送信息Sentinel的认知，也会被用于更新其他Sentinel对被监视服务器的认知。\n\n因为一个Sentinel可以通过分析接收到的频道信息来**获知其他Sentinel的存在**，并通过发送频道信息来**让其他Sentinel知道自己的存在**，所以用户在使用Sentinel的时候并不需要提供各个Sentinel的地址信息，监视同一个主服务器的多个Sentinel**可以自动发现对方**。\n\n#### 创建连向其他Sentinel的命令连接\n\n当Sentinel通过频道信息发现一个新的Sentinel时，它不仅会为新Sentinel在sentinels字典中创建相应的实例结构，还会创建一个连向新Sentinel的**命令连接**，但不会创建**订阅连接**。\n\n### 故障转移\n\n#### 检测主观下线\n\n在默认情况下，Sentinel会以每秒一次的频率向所有与它创建了命令连接的实例（包括主服务器、从服务器、其他Sentinel在内）发送PING命令，并通过实例返回的PING命令回复来判断实例是否在线。\n\n#### 检测客观下线\n\n当Sentinel将一个主服务器判断为主观下线之后，为了确认这个主服务器是否真的下线了，它会向同样监视这一主服务器的**其他Sentinel进行询问**，看它们是否也认为主服务器已经进入了下线状态（可以是主观下线或者客观下线）。当Sentinel从其他Sentinel那里接收到足够数量的已下线判断之后，Sentinel就会将从服务器判定为**客观下线**，并对主服务器**执行故障转移操作**。\n\n#### 选举领头Sentinel\n\n当一个主服务器被判断为客观下线时，监视这个下线主服务器的各个Sentinel会进行协商，选举出一个领头Sentinel，并由领头Sentinel对下线主服务器执行故障转移操作。\n\n如果有某个Sentinel被半数以上的Sentinel设置成了局部领头Sentinel，那么这个Sentinel成为领头Sentinel\n\n#### 故障转移\n\n1. 在已下线主服务器属下的所有从服务器里面，挑选出一个从服务器，并将其转换为主服务器。\n   选举策略：\n   - 删除不可用、或者有较长一段时间没有通信的从服务器；\n   - 根据优先级比较高、复制偏移量比较大的从服务器中选；\n   - 如果都一样，则选举**运行id最小**的那个从服务器；\n2. 让已下线主服务器属下的所有从服务器改为复制新的主服务器。\n3. 将已下线主服务器设置为新的主服务器的从服务器，当这个旧的主服务器重新上线时，它就会成为新的主服务器的从服务器。\n\n## 集群\n\nRedis集群是Redis提供的分布式数据库方案，集群通过分片（sharding）来进行数据共享，并提供复制和故障转移功能。\n\n### 节点\n\n节点会继续使用redisServer结构来保存服务器的状态，使用redisClient结构来保存客户端的状态，至于那些只有在集群模式下才会用到的数据，节点将它们保存到了**cluster.h/clusterNode结构、cluster.h/clusterLink结构，以及cluster.h/clusterState结构**里面。\n\n#### 集群数据结构\n\n- clusterNode\n\n  **clusterNode结构**保存了一个节点的当前状态，比如节点的创建时间、节点的名字、节点当前的配置纪元、节点的IP地址和端口号。\n\n- clusterLink\n\n  clusterNode结构的link属性是一个**clusterLink结构**，该结构保存了连接节点所需的有关信息，比如套接字描述符，输入缓冲区和输出缓冲区。\n  redisClient结构和clusterLink结构都有自己的套接字描述符和输入、输出缓冲区，这两个结构的区别在于，redisClient结构中的套接字和缓冲区是用于**连接客户端**的，而clusterLink结构中的套接字和缓冲区则是用于**连接节点**的。\n\n- clusterState\n  每个节点都保存着一个clusterState结构，这个结构记录了在当前节点的视角下，集群目前所处的状态，例如集群是在线还是下线，集群包含多少个节点，集群当前的配置纪元。\n\n### 槽指派\n\nRedis集群通过分片的方式来保存数据库中的键值对：集群的整个数据库被分为16384个槽（slot），数据库中的每个键都属于这16384个槽的其中一个，集群中的每个节点可以处理0个或最多16384个槽。\n\n当数据库中的16384个槽都有节点在处理时，集群处于上线状态（ok）；相反地，如果数据库中有任何一个槽没有得到处理，那么集群处于下线状态（fail）。\n\n通过向节点发送CLUSTER ADDSLOTS命令，我们可以将一个或多个槽指派（assign）给节点负责。\n\n**clusterNode结构**的**slots属性**和numslot属性记录了节点负责处理哪些槽。\n\n#### 传播节点的槽指派信息\n\n一个节点除了会将自己负责处理的槽记录在clusterNode结构的slots属性和numslots属性之外，它还会将自己的slots数组通过消息发送给集群中的其他节点，以此来告知其他节点自己目前负责处理哪些槽。\n\n当节点A通过消息从节点B那里接收到节点B的slots数组时，节点A会在自己的clusterState.nodes字典中查找节点B对应的clusterNode结构，并对结构中的slots数组进行**保存或者更新**。\n\n#### 记录集群所有槽的指派信息\n\nclusterState结构中的slots数组记录了集群中所有16384个槽的指派信息\n\nslots数组包含16384个项，每个数组项都是一个指向clusterNode结构的指针：\n\n![image-20220108154212058](./Redis设计与实现笔记/image-20220108154212058.png)\n\n#### 注意\n\nclusterNode.slots数组和clusterState.slots数组都保存了槽指派信息；为什么分两份存，主要是考虑操作性能。\n\n### 在集群中执行命令\n\n当客户端向节点发送与数据库键有关的命令时，接收命令的节点会计算出命令要处理的数据库键属于哪个槽，并检查这个槽是否指派给了自己：\n\n1. 如果键所在的槽正好就指派给了当前节点，那么节点直接执行这个命令。\n\n2. 如果键所在的槽并没有指派给当前节点，那么节点会向客户端返回一个**MOVED错误**，指引客户端转向（redirect）至正确的节点，并再次发送之前想要执行的命令。\n\n### 节点数据库的实现\n\n集群节点保存键值对以及键值对过期时间的方式\n\n节点和单机服务器在数据库方面的一个区别是，**节点只能使用0号数据库**，而单机Redis服务器则没有这一限制。\n\n### 复制与故障转移\n\nRedis集群中的节点分为主节点（master）和从节点（slave），其中主节点用于处理槽，而从节点则用于复制某个主节点，并在被复制的主节点下线时，代替下线主节点继续处理命令请求。\n\n一个节点成为从节点，并开始复制某个主节点这一信息会通过消息发送给集群中的其他节点，最终集群中的所有节点都会知道某个从节点正在复制某个主节点。\n\n集群中的所有节点都会在代表主节点的clusterNode结构的slaves属性和numslaves属性中记录正在复制这个主节点的从节点名单。\n\n#### 故障检测\n\n集群中的每个节点都会定期地向集群中的其他节点发送PING消息，以此来检测对方是否在线，如果接收PING消息的节点没有在规定的时间内，向发送PING消息的节点返回PONG消息，那么发送PING消息的节点就会将接收PING消息的节点标记为**疑似下线**（probable fail，PFAIL）。\n\n如果在一个集群里面，**半数**以上负责处理槽的主节点都将某个主节点x报告为**疑似下线**，那么这个主节点x将被标记为**已下线**\n\n#### 故障转移\n\n当一个从节点发现自己正在复制的主节点进入了已下线状态时，从节点将开始对下线主节点进行故障转移，以下是故障转移的执行步骤：\n\n1. 复制下线主节点的所有从节点里面，会有一个从节点被选中。\n2. 被选中的从节点会执行SLAVEOF no one命令，成为新的主节点。\n3. 新的主节点会撤销所有对已下线主节点的槽指派，并将这些槽全部指派给自己。\n4. 新的主节点向集群广播一条PONG消息，这条PONG消息可以让集群中的其他节点立即知道这个节点已经由从节点变成了主节点，并且这个主节点已经接管了原本由已下线节点负责处理的槽。\n5. 新的主节点开始接收和自己负责处理的槽有关的命令请求，故障转移完成。","source":"_posts/Redis设计与实现笔记.md","raw":"## 数据结构\n\n### 简单动态字符串\n\nSDS跟C语言一样是个char字符数组；\n\n一个sds对象有free、len属性记录空余空间和当前字符串长度\n\n#### 示例图\n\n![image-20211221122226731](./Redis设计与实现笔记/image-20211221122226731.png)\n\n#### 特点\n\n- **常数复杂度获取字符串长度**\n  直接从free、len属性获取\n\n- **杜绝缓冲区溢出**\n  C语言字符串拼接时都假定分配的内存足够，如果这个假定不成立就会产生缓冲区溢出；\n  当SDS API需要对SDS进行修改时，API会先检查SDS的空间是否满足修改所需的要求，如果不满足的话，**API会自动将SDS的空间扩展至执行修改所需的大小**，然后才执行实际的修改操作，所以使用SDS既不需要手动修改SDS的空间大小，也不会出现前面所说的缓冲区溢出问题\n\n- **减少修改字符串时带来的内存重分配次数**\n\n  有两种手段：\n\n  1. 空间预分配\n     扩容的时候，会比所需的内存多分配一部分空闲内存（有两种公示决定额外分配多少内存）\n\n  2. 惰性空间释放\n\n     sds字符串缩短之后，内存不是马上回收，而是作为空闲内存保存\n\n- **二进制安全**\n\n  C字符串中的字符必须符合某种编码（比如ASCII）；sds没有这个限制；\n\n- **兼容部分C字符串函数**\n\n  如果我们有一个保存文本数据的SDS值sds，那么我们就可以重用＜string.h＞/strcasecmp函数，使用它来对比SDS保存的字符串和另一个C字符串：\n\n### 链表\n\n#### 示例图\n\n![image-20211221123652853](./Redis设计与实现笔记/image-20211221123652853.png)\n\n#### 特点\n\n- 双端\n- 无环\n- 带表头、表尾指针\n- 带长度计数器\n- 多态；可以保存不通类型的值\n\n### 字典\n\n#### 示例图\n\n![image-20211221124137128](./Redis设计与实现笔记/image-20211221124137128.png)\n\nht属性是一个包含两个项的数组，数组中的每个项都是一个dictht哈希表，一般情况下，字典只使用ht[0]哈希表，ht[1]哈希表只会在对ht[0]哈希表进行rehash时使用。\n\n#### 扩容\n\n1. 服务器目前没有在执行BGSAVE命令或者BGREWRITEAOF命令，并且哈希表的负载因子大于等于1。\n\n2. 服务器目前正在执行BGSAVE命令或者BGREWRITEAOF命令，并且哈希表的负载因子大于等于5。\n\n#### 收缩\n\n当哈希表的负载因子小于0.1时，程序自动开始对哈希表执行收缩操作。\n\n#### 渐进式rehash\n\n以下是哈希表渐进式rehash的详细步骤：\n\n1）为ht[1]分配空间，让字典同时持有ht[0]和ht[1]两个哈希表。\n\n2）在字典中维持一个索引计数器变量rehashidx，并将它的值设置为0，表示rehash工作正式开始。\n\n3）在rehash进行期间，每次对字典执行添加、删除、查找或者更新操作时，程序除了执行指定的操作以外，还会顺带将ht[0]哈希表在rehashidx索引上的所有键值对rehash到ht[1]，当rehash工作完成之后，程序将rehashidx属性的值增一。\n\n4）随着字典操作的不断执行，最终在某个时间点上，ht[0]的所有键值对都会被rehash至ht[1]，这时程序将rehashidx属性的值设为-1，表示rehash操作已完成。\n\n渐进式rehash的好处在于它采取分而治之的方式，将rehash键值对所需的计算工作均摊到对字典的每个添加、删除、查找和更新操作上，从而避免了集中式rehash而带来的庞大计算量。\n\n另外，在渐进式rehash执行期间，新添加到字典的键值对一律**会被保存到ht[1]**里面，而ht[0]则不再进行任何添加操作，这一措施保证了ht[0]包含的键值对数量会只减不增，并随着rehash操作的执行而最终变成空表。\n\n### 跳跃表\n\n#### 示例图\n\n![image-20211223121705566](./Redis设计与实现笔记/image-20211223121705566.png)\n\nRedis只在两个地方用到了跳跃表，一个是实现有序集合键，另一个是在集群节点中用作内部数据结构。\n\n每个跳跃表节点的层高都是1至32之间的随机数\n\n### 整数集合\n\n整数集合（intset）是集合键的底层实现之一，当一个集合**只包含整数值元素**，并且这个集合的**元素数量不多**时，Redis就会使用整数集合作为集合键的底层实现。\n\n#### 示例图\n\n![image-20211223122023914](./Redis设计与实现笔记/image-20211223122023914.png)\n\n当向一个底层为int16_t数组的整数集合添加一个int64_t类型的整数值时，整数集合已有的所有元素都会被转换成int64_t类型\n\n#### 升级\n\n类型：int16_t，int32_t，int64_t\n\n当向一个底层为int16_t数组的整数集合添加一个int64_t类型的整数值时，整数集合已有的所有元素都会被转换成int64_t类型；\n\n整数集合**不支持降级**操作，一旦对数组进行了升级，编码就会一直保持升级后的状态。\n\n**好处**：整数集合的升级策略有两个好处，一个是提升整数集合的灵活性，另一个是尽可能地节约内存。\n\n### 压缩列表\n\n压缩列表（ziplist）是列表键和哈希键的底层实现之一。当一个列表键只包含少量列表项，并且每个列表项要么就是小整数值，要么就是长度比较短的字符串，那么Redis就会使用压缩列表来做列表键的底层实现\n\n#### 示例图\n\n![image-20211223122749578](./Redis设计与实现笔记/image-20211223122749578.png)\n\n![image-20211223123006023](./Redis设计与实现笔记/image-20211223123006023.png)\n\n#### 连锁更新\n\n每个节点的previous_entry_length属性都记录了前一个节点的长度：\n\n❑如果前一节点的长度小于254字节，那么previous_entry_length属性需要用1字节长的空间来保存这个长度值。\n\n❑如果前一节点的长度大于等于254字节，那么previous_entry_length属性需要用5字节长的空间来保存这个长度值。\n\n![image-20211223123127507](./Redis设计与实现笔记/image-20211223123127507.png)\n\n![image-20211223123242022](./Redis设计与实现笔记/image-20211223123242022.png)\n\n### 对象\n\nRedis的对象系统还实现了基于引用计数技术的内存回收机制，当程序不再使用某个对象的时候，这个对象所占用的内存就会被自动释放；\n\n#### 结构\n\n![image-20211223123903740](./Redis设计与实现笔记/image-20211223123903740.png)\n\n![image-20211223123845793](./Redis设计与实现笔记/image-20211223123845793.png)\n\n#### 共享对象\n\nRedis只对包含整数值的字符串对象进行共享。\n\n![image-20211223124409476](./Redis设计与实现笔记/image-20211223124409476.png)\n\n假设键A创建了一个包含整数值100的字符串对象作为值对象，如果这时键B也要创建一个同样保存了整数值100的字符串对象作为值对象，那么服务器让键A和键B共享同一个字符串对象；\n\nRedis会在初始化服务器时，创建一万个字符串对象，这些对象包含了从0到9999的所有整数值，当服务器需要用到值为0到9999的字符串对象时，服务器就会使用这些共享对象，而不是新创建对象。\n\n# 第二部分：单机数据库的实现\n\n## 数据库\n\n#### 示例图\n\n![image-20211224121242433](./Redis设计与实现笔记/image-20211224121242433.png)\n\n![image-20211224121349312](./Redis设计与实现笔记/image-20211224121349312.png)\n\n#### 过期时间\n\n保存过期时间\n\nredisDb结构的expires字典保存了数据库中所有键的过期时间，我们称这个字典为过期字典：\n\n❑过期字典的键是一个指针，这个指针指向键空间中的某个键对象（也即是某个数据库键）。\n\n❑过期字典的值是一个long long类型的整数，这个整数保存了键所指向的数据库键的过期时间——一个毫秒精度的UNIX时间戳。\n\n##### 过期键删除策略\n\nRedis服务器实际使用的是**惰性删除**和**定期删除**两种策略：通过配合使用这两种删除策略，服务器可以很好地在合理使用CPU时间和避免浪费内存空间之间取得平衡。\n\n- 惰性删除\n\n  操作键的时候判断一下键是否过期，如果过期了则删除键，并且按照键不存在的方式处理命令\n\n- 定期删除\n  过期键的定期删除策略由redis.c/activeExpireCycle函数实现，每当Redis的服务器周期性操作redis.c/serverCron函数执行时，activeExpireCycle函数就会被调用，**它在规定的时间内，分多次遍历服务器中的各个数据库**，从数据库的expires字典中**随机**检查一部分键的过期时间，并删除其中的过期键。\n\n##### AOF、RDB和复制功能对过期键的处理\n\n-  生成RDB文件\n  在执行SAVE命令或者BGSAVE命令创建一个新的RDB文件时，程序会对数据库中的键进行检查，**已过期的键不会被保存**到新创建的RDB文件中。\n\n- 载入RDB文件\n\n  如果服务器以主服务器模式运行，那么在载入RDB文件时，程序会对文件中保存的键进行检查，未过期的键会被载入到数据库中，而**过期键则会被忽略，所以过期键对载入RDB文件的主服务器不会造成影响**。如果是从服务器模式的话会**所有键都载入**，但是因为进行数据同步的时候从服务器的数据库会被清空，所以不会对数据库造成影响。\n\n- AOF文件写入\n  当过期键被惰性删除或者定期删除之后，程序会向AOF文件追加（append）一条DEL命令，来显式地记录该键已被删除。\n\n- AOF重写\n  和生成RDB文件时类似，在执行AOF重写的过程中，程序会对数据库中的键进行检查，**已过期的键不会被保存到重写后的AOF文件中。**\n\n- 复制\n  主服务器在删除一个过期键之后，会显式地向所有从服务器发送一个DEL命令，告知从服务器删除这个过期键。从服务器只有在接到主服务器发来的DEL命令之后，才会删除过期键。\n\n## RDB持久化\n\nRDB文件是一个经过压缩的二进制文件，由多个部分组成\n\n有两个Redis命令可以用于生成RDB文件，一个是SAVE，另一个是BGSAVE。\n\n- SAVE\n  SAVE命令会阻塞Redis服务器进程，直到RDB文件创建完毕为止，在服务器进程阻塞期间，服务器不能处理任何命令请求\n\n- BGSAVE\n  BGSAVE命令会派生出一个子进程，然后由子进程负责创建RDB文件，服务器进程（父进程）继续处理命令请求\n\n### RDB载入\n\n启动的时候自动载入\n\n如果服务器开启了AOF持久化功能，那么服务器会**优先使用AOF文件**来还原数据库状态。只有在AOF持久化功能处于关闭状态时，服务器才会使用RDB文件来还原数据库状态。\n\n### 自动保存\n\n因为BGSAVE命令可以在不阻塞服务器进程的情况下执行，所以Redis允许用户通过设置服务器配置的save选项，让服务器每隔一段时间自动执行一次BGSAVE命令。\n\n![image-20211224123718806](./Redis设计与实现笔记/image-20211224123718806.png)\n\n#### 实现方式\n\n数据库维护dirty计数器和lastsave属性\n\nRedis的服务器周期性操作函数**serverCron**默认每隔100毫秒就会执行一次，该函数用于对正在运行的服务器进行维护，它的其中一项工作就是检查save选项所设置的保存条件是否已经满足，如果满足的话，就执行BGSAVE命令。\n\n## AOF持久化\n\n### AOF文件的写入与同步\n\n因为服务器在处理文件事件时可能会执行写命令，使得一些内容被追加到aof_buf缓冲区里面，所以在服务器每次结束一个事件循环之前，它都会调用fushAppendOnlyFile函数，考虑是否需要将aof_buf缓冲区中的内容写入和保存到AOF文件里面\n\n![image-20211227121109237](./Redis设计与实现笔记/image-20211227121109237.png)\n\n### AOF文件的载入与数据还原\n\nRedis读取AOF文件并还原数据库状态的详细步骤如下：\n\n1）创建一个不带网络连接的伪客户端（fake client）\n\n2）从AOF文件中分析并读取出一条写命令。\n\n3）使用伪客户端执行被读出的写命令。\n\n4）一直执行步骤2和步骤3，直到AOF文件中的所有写命令都被处理完毕为止。\n\n### AOF重写\n\n虽然Redis将生成新AOF文件替换旧AOF文件的功能命名为“AOF文件重写”，但实际上，AOF文件重写并不需要对现有的AOF文件进行任何读取、分析或者写入操作，这个功能是通过读取服务器当前的数据库状态来实现的。\n\n首先从数据库中读取键现在的值，然后用一条命令去记录键值对，代替之前记录这个键值对的多条命令，这就是AOF重写功能的实现原理。\n\n### AOF后台重写\n\nRedis不希望AOF重写造成服务器无法处理请求，所以Redis决定将AOF重写程序放到子进程里执行。\n\n子进程在重写期间，父进程还在接收命令，会出现数据不一致的情况。为了解决这种数据不一致问题，Redis服务器设置了一个AOF重写缓冲区，这个缓冲区在服务器创建子进程之后开始使用，当Redis服务器执行完一个写命令之后，它会同时将这个写命令发送给AOF缓冲区和AOF重写缓冲区。\n\n当子进程完成AOF重写工作之后，它会向父进程发送一个信号，父进程在接到该信号之后，会调用一个信号处理函数，并执行以下工作：\n\n1. 将AOF重写缓冲区中的所有内容写入到新AOF文件中，这时新AOF文件所保存的数据库状态将和服务器当前的数据库状态一致。\n2. 对新的AOF文件进行改名，原子地（atomic）覆盖现有的AOF文件，完成新旧两个AOF文件的替换。\n\n## 事件\n\nRedis服务器是一个事件驱动程序，服务器需要处理以下两类事件：\n\n- 文件事件（file event）：Redis服务器通过套接字与客户端（或者其他Redis服务器）进行连接，而文件事件就是服务器对套接字操作的抽象。服务器与客户端（或者其他服务器）的通信会产生相应的文件事件，而服务器则通过监听并处理这些事件来完成一系列网络通信操作。\n\n- 时间事件（time event）：Redis服务器中的一些操作（比如serverCron函数）需要在给定的时间点执行，而时间事件就是服务器对这类定时操作的抽象。\n\n### 文件事件\n\n![image-20211227122435497](./Redis设计与实现笔记/image-20211227122435497.png)\n\n尽管多个文件事件可能会并发地出现，但I/O多路复用程序总是会将所有产生事件的套接字都放到一个队列里面，然后通过这个队列，以有序（sequentially）、同步（synchronously）、每次一个套接字的方式向文件事件分派器传送套接字\n\n#### 文件事件的处理器\n\nRedis为文件事件编写了多个处理器，这些事件处理器分别用于实现不同的网络通信需求，比如说：\n\n- 为了对连接服务器的各个客户端进行应答，服务器要为监听套接字关联**连接应答处理器**。\n  当**Redis服务器进行初始化**的时候，程序会将这个连接应答处理器和服务器监听套接字的**AE_READABLE**事件关联起来，当有客户端用sys/socket.h/connect函数连接服务器监听套接字的时候，套接字就会产生AE_READABLE事件，引发连接应答处理器执行，并执行相应的套接字应答操作。\n\n- 为了接收客户端传来的命令请求，服务器要为客户端套接字关联**命令请求处理器**。\n  当一个客户端**通过连接应答处理器成功连接到服务器**之后，服务器会将客户端套接字的**AE_READABLE**事件和命令请求处理器关联起来，当客户端向服务器发送命令请求的时候，套接字就会产生AE_READABLE事件，引发命令请求处理器执行，并执行相应的套接字读入操作。在客户端连接服务器的整个过程中，服务器都会一直为客户端套接字的AE_READABLE事件关联命令请求处理器。\n\n- 为了向客户端返回命令的执行结果，服务器要为客户端套接字关联**命令回复处理器**。\n  当**服务器有命令回复需要传送给客户端的时候**，服务器会将客户端套接字的AE_WRITABLE事件和命令回复处理器关联起来，当客户端准备好接收服务器传回的命令回复时，就会产生AE_WRITABLE事件，引发命令回复处理器执行，并执行相应的套接字写入操作。当服务器有命令回复需要传送给客户端的时候，服务器会将客户端套接字的AE_WRITABLE事件和命令回复处理器关联起来。当命令回复发送完毕之后，服务器就会**解除**命令回复处理器与客户端套接字的AE_WRITABLE事件之间的关联。\n\n- 当主服务器和从服务器进行复制操作时，主从服务器都需要关联特别为复制功能编写的复制处理器。\n\n### 时间事件\n\nRedis的时间事件分为以下两类：\n\n- 定时事件：让一段程序在指定的时间之后执行一次。比如说，让程序X在当前时间的30毫秒之后执行一次。\n\n- 周期性事件：让一段程序每隔指定时间就执行一次。比如说，让程序Y每隔30毫秒就执行一次。\n\n目前版本的Redis只使用周期性事件，而没有使用定时事件。\n\n#### 实现\n\n服务器将所有时间事件都放在一个无序链表中，每当时间事件执行器运行时，它就**遍历整个链表**，查找所有已到达的时间事件，并调用相应的事件处理器。\n\n在目前版本中，正常模式下的Redis服务器只使用serverCron一个时间事件，在这种情况下，服务器几乎是将**无序链表退化成一个指针来使用**，所以使用无序链表来保存时间事件，**并不影响事件执行的性能**。\n\n## 客户端\n\nRedis通过使用由I/O多路复用技术实现的文件事件处理器，Redis服务器使用单线程单进程的方式来处理命令请求，并与多个客户端进行网络通信。\n\nRedis服务器状态结构的clients属性是一个链表，这个链表保存了所有与服务器连接的客户端的状态结构，对客户端执行批量操作，或者查找某个指定的客户端，都可以通过遍历clients链表来完成。\n\n### 属性\n\n1. 客户端的套接字描述符。\n2. 客户端的名字。\n3. 客户端的标志值（fag）。\n4. 指向客户端正在使用的数据库的指针，以及该数据库的号码。\n5. 客户端当前要执行的命令、命令的参数、命令参数的个数，以及指向命令实现函数的指针。\n6. 客户端的输入缓冲区和输出缓冲区。\n7. 客户端的复制状态信息，以及进行复制所需的数据结构。\n8. 客户端执行BRPOP、BLPOP等列表阻塞命令时使用的数据结构。\n9. 客户端的事务状态，以及执行WATCH命令时用到的数据结构。\n10. 客户端执行发布与订阅功能时用到的数据结构。\n11. 客户端的身份验证标志。\n12. 客户端的创建时间，客户端和服务器最后一次通信的时间，以及客户端的输出缓冲区大小超出软性限制（soft limit）的时间。\n\n### 示例图\n\n![image-20220108142751976](./Redis设计与实现笔记/image-20220108142751976.png)\n\n### 注意\n\n通常情况下，Redis只会将那些对数据库进行了修改的命令写入到AOF文件，并复制到各个从服务器。如果一个命令没有对数据库进行任何修改，那么它就会被认为是只读命令，这个命令不会被写入到AOF文件，也不会被复制到从服务器。\n\n以上规则适用于绝大部分Redis命令，但PUBSUB命令和SCRIPT LOAD命令是其中的例外。PUBSUB命令虽然没有修改数据库，但PUBSUB命令向频道的所有订阅者发送消息这一行为带有副作用，接收到消息的所有客户端的状态都会因为这个命令而改变。因此，服务器需要使用REDIS_FORCE_AOF标志，强制将这个命令写入AOF文件，这样在将来载入AOF文件时，服务器就可以再次执行相同的PUBSUB命令，并产生相同的副作用。\n\n### 伪客户端\n\n1. Lua\n\n   lua_client伪客户端在服务器运行的整个生命期中会一直存在，只有服务器被关闭时，这个客户端才会被关闭。\n\n2. 载入AOF文件\n\n   服务器在载入AOF文件时，会创建用于执行AOF文件包含的Redis命令的伪客户端，并在载入完成之后，关闭这个伪客户端。\n\n## 服务器\n\n### 命令请求的执行过程（重要）\n\n1. 发送命令请求\n\n   ![image-20220108144056270](./Redis设计与实现笔记/image-20220108144056270.png)\n\n2. 读取命令请求\n   当客户端与服务器之间的**连接套接字**因为客户端的写入而变得**可读**时，服务器将调用**命令请求处理器**来执行以下操作：\n\n   - 读取套接字中协议格式的命令请求，并将其保存到客户端状态的**输入缓冲区**里面。\n   - 对输入缓冲区中的命令请求进行**分析**，提取出命令请求中包含的**命令参数**，以及命令参数的个数，然后分别将参数和参数个数保存到客户端状态的argv属性和argc属性里面。\n   - 调用**命令执行器**，执行客户端指定的命令。\n\n   命令执行器：\n\n   - 去命令表查找**命令的实现函数**\n   - 执行预备操作：\n     1. 检查参数是否正确； \n     2. 检查身份是否验证； \n     3. 检查内存使用情况\n     4. 检查是否在订阅模式，如果是，只会接收SUBSCRIBE、PSUBSCRIBE、UNSUBSCRIBE、PUNSUBSCRIBE四个命令\n     5. 检查是否在Lua脚本阻塞状态，如果是则拒绝命令\n     6. 检查是否在执行事务，如果是则只会执行EXEC、DISCARD、MULTI、WATCH四个命令\n     7. 检查服务器是否在进行数据载入，如果是则客户端发送的命令必须带有l标识（比如INFO、SHUTDOWN、PUBLISH等等）才会被服务器执行\n   - 调用**命令的实现函数**，并将结果放在输出缓冲区\n   - 执行后续工作\n     1. 记录慢查询日志\n     2. 记录aop文件\n     3. 如果有从服务器复制这个服务器，则会执行命令传播给所有从服务器\n     4. 记录调用次数\n\n3. 将命令回复给客户端\n   当客户端套接字变为**可写状态**时，服务器就会执行**命令回复处理器**，将保存在客户端**输出缓冲区**中的命令回复发送给客户端。\n\n4. 客户端打印回复内容\n\n### serverCron函数\n\n每100ms运行一次\n\n#### 作用：\n\n1. 更新服务器时间缓存\n   避免每次获取时间的时候都执行系统调用，直接在内存中维护了时间\n2. 更新服务器每秒执行的次数\n3. 更新服务器内存峰值记录\n4. 处理SIGTERM信号\n5. 管理客户端资源\n   如果客户端链接超时则会释放这个客户端；如果输入缓冲区的大小超过了一定的长度，则会释放当前的输入缓冲区，并重新创建一个，以防客户端的输入缓冲区耗费太多内存。\n6. 管理数据库资源\n   删除过期键\n7. 执行被延迟的BGREWRITEAOF\n8. 将AOF缓冲区中的内容写入AOF文件\n9. 关闭异步客户端\n\n### 初始化服务器\n\n一个Redis服务器从启动到能够接受客户端的命令请求，需要经过一系列的初始化和设置过程，比如初始化服务器状态，接受用户指定的服务器配置，创建相应的数据结构和网络连接等等。\n\n# 第三部分：多机数据库的实现\n\n## 复制\n\n在Redis中，用户可以通过执行SLAVEOF命令或者设置slaveof选项，让一个服务器去复制（replicate）另一个服务器，我们称呼被复制的服务器为主服务器（master），而对主服务器进行复制的服务器则被称为从服务器（slave）。\n\n#### 旧版复制功能\n\nRedis的复制功能分为**同步**（sync）和**命令传播**（command propagate）两个操作：\n\n##### 同步\n\n从服务器对主服务器的同步操作需要通过向主服务器发送**SYNC命令**来完成，以下是SYNC命令的执行步骤：\n\n1. 从服务器向主服务器发送SYNC命令。\n2. 收到SYNC命令的主服务器执行BGSAVE命令，在**后台**生成一个RDB文件，并使用一个**缓冲区记录从现在开始执行的所有写命令**。\n3. 当主服务器的BGSAVE命令执行完毕时，主服务器会将BGSAVE命令生成的RDB文件发送给从服务器，从服务器接收并载入这个RDB文件，将自己的数据库状态更新至主服务器执行BGSAVE命令时的数据库状态。\n4. 主服务器将记录在缓冲区里面的所有写命令发送给从服务器，从服务器执行这些写命令，将自己的数据库状态更新至主服务器数据库当前所处的状态。\n\n![image-20220108150337037](./Redis设计与实现笔记/image-20220108150337037.png)\n\n##### 命令传播\n\n为了让主从服务器再次回到一致状态，主服务器需要对从服务器执行命令传播操作：主服务器会将自己执行的写命令，也即是造成主从服务器不一致的那条写命令，发送给从服务器执行，当从服务器执行了相同的写命令之后，主从服务器将再次回到一致状态。\n\n##### 缺陷\n\nSYNC命令是一个非常耗费资源的操作（主服务器需要生成RDB文件，从服务器需要载入RDB文件，网络需要传输RDB文件）；当从服务器断线重连之后，需要通过SYNC从头同步整个数据库。\n\n#### 新版复制功能\n\n使用PSYNC命令代替SYNC命令来执行复制时的同步操作。PSYNC命令具有完整重同步（full resynchronization）和部分重同步（partialresynchronization）两种模式。\n\n##### 完整重同步\n\n用于初次复制的情况\n\n##### 部分重同步\n\n主服务器维护一个固定长度的**复制积压缓冲区**\n\n从服务器断线重新复制的时候，告诉主服务器复制的偏移量，主服务器如果发现断线期间新增的数据还在**复制积压缓冲区**中，则会执行部分重同步，否则执行完整重同步。\n\n![image-20220108150821262](./Redis设计与实现笔记/image-20220108150821262.png)\n\n## Sentinel\n\nSentinel（哨岗、哨兵）是Redis的**高可用性**（high availability）解决方案：由一个或多个Sentinel实例（instance）组成的Sentinel系统（system）可以监视任意多个主服务器，以及这些主服务器属下的所有从服务器，并在被监视的主服务器进入下线状态时，自动将下线主服务器属下的某个从服务器升级为新的主服务器，然后由新的主服务器代替已下线的主服务器继续处理命令请求。\n\n### 启动\n\n#### 启动并初始化Sentinel\n\n1. 首先，因为Sentinel本质上只是一个运行在特殊模式下的Redis服务器，所以启动Sentinel的第一步，就是初始化一个普通的Redis服务器。\n\n2. 启动Sentinel的第二个步骤就是将一部分普通Redis服务器使用的代码替换成Sentinel专用代码\n3. 在应用了Sentinel的专用代码之后，接下来，服务器会初始化一个sentinel.c/sentinelState结构（后面简称“Sentinel状态”），这个结构保存了服务器中所有和Sentinel功能有关的状\n4. 初始化Sentinel状态的masters属性\n5. 初始化Sentinel的最后一步是创建连向被监视主服务器的网络连接，Sentinel将成为主服务器的客户端，它可以向主服务器发送命令，并从命令回复中获取相关的信息。\n\n#### 获取主服务器的信息\n\nSentinel默认会以每十秒一次的频率，通过命令连接向被监视的主服务器发送INFO命令，并通过分析INFO命令的回复来获取主服务器的当前信息。\n\n#### 获取从服务器的信息\n\n当Sentinel发现主服务器有新的从服务器出现时，Sentinel除了会为这个新的从服务器创建相应的实例结构之外，Sentinel还会创建连接到从服务器的命令连接和订阅连接。在创建命令连接之后，Sentinel在默认情况下，会以每十秒一次的频率通过命令连接向从服务器发送INFO命令。\n\n#### 向主服务器和从服务器发送信息\n\n在默认情况下，Sentinel会以每两秒一次的频率，通过命令连接向所有被监视的主服务器和从服务器发送命令告诉监视的服务器自己的信息。\n\n#### 接收来自主服务器和从服务器的频道信息\n\n对于每个与Sentinel连接的服务器，Sentinel既通过命令连接向服务器的__sentinel__:hello频道发送信息，又通过订阅连接从服务器的__sentinel__:hello频道接收信息。\n\n对于监视同一个服务器的多个Sentinel来说，一个Sentinel发送的信息会被其他Sentinel接收到，这些信息会被用于更新其他Sentinel对发送信息Sentinel的认知，也会被用于更新其他Sentinel对被监视服务器的认知。\n\n因为一个Sentinel可以通过分析接收到的频道信息来**获知其他Sentinel的存在**，并通过发送频道信息来**让其他Sentinel知道自己的存在**，所以用户在使用Sentinel的时候并不需要提供各个Sentinel的地址信息，监视同一个主服务器的多个Sentinel**可以自动发现对方**。\n\n#### 创建连向其他Sentinel的命令连接\n\n当Sentinel通过频道信息发现一个新的Sentinel时，它不仅会为新Sentinel在sentinels字典中创建相应的实例结构，还会创建一个连向新Sentinel的**命令连接**，但不会创建**订阅连接**。\n\n### 故障转移\n\n#### 检测主观下线\n\n在默认情况下，Sentinel会以每秒一次的频率向所有与它创建了命令连接的实例（包括主服务器、从服务器、其他Sentinel在内）发送PING命令，并通过实例返回的PING命令回复来判断实例是否在线。\n\n#### 检测客观下线\n\n当Sentinel将一个主服务器判断为主观下线之后，为了确认这个主服务器是否真的下线了，它会向同样监视这一主服务器的**其他Sentinel进行询问**，看它们是否也认为主服务器已经进入了下线状态（可以是主观下线或者客观下线）。当Sentinel从其他Sentinel那里接收到足够数量的已下线判断之后，Sentinel就会将从服务器判定为**客观下线**，并对主服务器**执行故障转移操作**。\n\n#### 选举领头Sentinel\n\n当一个主服务器被判断为客观下线时，监视这个下线主服务器的各个Sentinel会进行协商，选举出一个领头Sentinel，并由领头Sentinel对下线主服务器执行故障转移操作。\n\n如果有某个Sentinel被半数以上的Sentinel设置成了局部领头Sentinel，那么这个Sentinel成为领头Sentinel\n\n#### 故障转移\n\n1. 在已下线主服务器属下的所有从服务器里面，挑选出一个从服务器，并将其转换为主服务器。\n   选举策略：\n   - 删除不可用、或者有较长一段时间没有通信的从服务器；\n   - 根据优先级比较高、复制偏移量比较大的从服务器中选；\n   - 如果都一样，则选举**运行id最小**的那个从服务器；\n2. 让已下线主服务器属下的所有从服务器改为复制新的主服务器。\n3. 将已下线主服务器设置为新的主服务器的从服务器，当这个旧的主服务器重新上线时，它就会成为新的主服务器的从服务器。\n\n## 集群\n\nRedis集群是Redis提供的分布式数据库方案，集群通过分片（sharding）来进行数据共享，并提供复制和故障转移功能。\n\n### 节点\n\n节点会继续使用redisServer结构来保存服务器的状态，使用redisClient结构来保存客户端的状态，至于那些只有在集群模式下才会用到的数据，节点将它们保存到了**cluster.h/clusterNode结构、cluster.h/clusterLink结构，以及cluster.h/clusterState结构**里面。\n\n#### 集群数据结构\n\n- clusterNode\n\n  **clusterNode结构**保存了一个节点的当前状态，比如节点的创建时间、节点的名字、节点当前的配置纪元、节点的IP地址和端口号。\n\n- clusterLink\n\n  clusterNode结构的link属性是一个**clusterLink结构**，该结构保存了连接节点所需的有关信息，比如套接字描述符，输入缓冲区和输出缓冲区。\n  redisClient结构和clusterLink结构都有自己的套接字描述符和输入、输出缓冲区，这两个结构的区别在于，redisClient结构中的套接字和缓冲区是用于**连接客户端**的，而clusterLink结构中的套接字和缓冲区则是用于**连接节点**的。\n\n- clusterState\n  每个节点都保存着一个clusterState结构，这个结构记录了在当前节点的视角下，集群目前所处的状态，例如集群是在线还是下线，集群包含多少个节点，集群当前的配置纪元。\n\n### 槽指派\n\nRedis集群通过分片的方式来保存数据库中的键值对：集群的整个数据库被分为16384个槽（slot），数据库中的每个键都属于这16384个槽的其中一个，集群中的每个节点可以处理0个或最多16384个槽。\n\n当数据库中的16384个槽都有节点在处理时，集群处于上线状态（ok）；相反地，如果数据库中有任何一个槽没有得到处理，那么集群处于下线状态（fail）。\n\n通过向节点发送CLUSTER ADDSLOTS命令，我们可以将一个或多个槽指派（assign）给节点负责。\n\n**clusterNode结构**的**slots属性**和numslot属性记录了节点负责处理哪些槽。\n\n#### 传播节点的槽指派信息\n\n一个节点除了会将自己负责处理的槽记录在clusterNode结构的slots属性和numslots属性之外，它还会将自己的slots数组通过消息发送给集群中的其他节点，以此来告知其他节点自己目前负责处理哪些槽。\n\n当节点A通过消息从节点B那里接收到节点B的slots数组时，节点A会在自己的clusterState.nodes字典中查找节点B对应的clusterNode结构，并对结构中的slots数组进行**保存或者更新**。\n\n#### 记录集群所有槽的指派信息\n\nclusterState结构中的slots数组记录了集群中所有16384个槽的指派信息\n\nslots数组包含16384个项，每个数组项都是一个指向clusterNode结构的指针：\n\n![image-20220108154212058](./Redis设计与实现笔记/image-20220108154212058.png)\n\n#### 注意\n\nclusterNode.slots数组和clusterState.slots数组都保存了槽指派信息；为什么分两份存，主要是考虑操作性能。\n\n### 在集群中执行命令\n\n当客户端向节点发送与数据库键有关的命令时，接收命令的节点会计算出命令要处理的数据库键属于哪个槽，并检查这个槽是否指派给了自己：\n\n1. 如果键所在的槽正好就指派给了当前节点，那么节点直接执行这个命令。\n\n2. 如果键所在的槽并没有指派给当前节点，那么节点会向客户端返回一个**MOVED错误**，指引客户端转向（redirect）至正确的节点，并再次发送之前想要执行的命令。\n\n### 节点数据库的实现\n\n集群节点保存键值对以及键值对过期时间的方式\n\n节点和单机服务器在数据库方面的一个区别是，**节点只能使用0号数据库**，而单机Redis服务器则没有这一限制。\n\n### 复制与故障转移\n\nRedis集群中的节点分为主节点（master）和从节点（slave），其中主节点用于处理槽，而从节点则用于复制某个主节点，并在被复制的主节点下线时，代替下线主节点继续处理命令请求。\n\n一个节点成为从节点，并开始复制某个主节点这一信息会通过消息发送给集群中的其他节点，最终集群中的所有节点都会知道某个从节点正在复制某个主节点。\n\n集群中的所有节点都会在代表主节点的clusterNode结构的slaves属性和numslaves属性中记录正在复制这个主节点的从节点名单。\n\n#### 故障检测\n\n集群中的每个节点都会定期地向集群中的其他节点发送PING消息，以此来检测对方是否在线，如果接收PING消息的节点没有在规定的时间内，向发送PING消息的节点返回PONG消息，那么发送PING消息的节点就会将接收PING消息的节点标记为**疑似下线**（probable fail，PFAIL）。\n\n如果在一个集群里面，**半数**以上负责处理槽的主节点都将某个主节点x报告为**疑似下线**，那么这个主节点x将被标记为**已下线**\n\n#### 故障转移\n\n当一个从节点发现自己正在复制的主节点进入了已下线状态时，从节点将开始对下线主节点进行故障转移，以下是故障转移的执行步骤：\n\n1. 复制下线主节点的所有从节点里面，会有一个从节点被选中。\n2. 被选中的从节点会执行SLAVEOF no one命令，成为新的主节点。\n3. 新的主节点会撤销所有对已下线主节点的槽指派，并将这些槽全部指派给自己。\n4. 新的主节点向集群广播一条PONG消息，这条PONG消息可以让集群中的其他节点立即知道这个节点已经由从节点变成了主节点，并且这个主节点已经接管了原本由已下线节点负责处理的槽。\n5. 新的主节点开始接收和自己负责处理的槽有关的命令请求，故障转移完成。","slug":"Redis设计与实现笔记","published":1,"date":"2022-05-31T03:09:28.201Z","updated":"2022-05-31T03:13:15.771Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3tl5aqa00003m6a9o9u2zfv","content":"<h2 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h2><h3 id=\"简单动态字符串\"><a href=\"#简单动态字符串\" class=\"headerlink\" title=\"简单动态字符串\"></a>简单动态字符串</h3><p>SDS跟C语言一样是个char字符数组；</p>\n<p>一个sds对象有free、len属性记录空余空间和当前字符串长度</p>\n<h4 id=\"示例图\"><a href=\"#示例图\" class=\"headerlink\" title=\"示例图\"></a>示例图</h4><p><img src=\"/./Redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E7%AC%94%E8%AE%B0/image-20211221122226731.png\" alt=\"image-20211221122226731\"></p>\n<h4 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li><p><strong>常数复杂度获取字符串长度</strong><br>直接从free、len属性获取</p>\n</li>\n<li><p><strong>杜绝缓冲区溢出</strong><br>C语言字符串拼接时都假定分配的内存足够，如果这个假定不成立就会产生缓冲区溢出；<br>当SDS API需要对SDS进行修改时，API会先检查SDS的空间是否满足修改所需的要求，如果不满足的话，<strong>API会自动将SDS的空间扩展至执行修改所需的大小</strong>，然后才执行实际的修改操作，所以使用SDS既不需要手动修改SDS的空间大小，也不会出现前面所说的缓冲区溢出问题</p>\n</li>\n<li><p><strong>减少修改字符串时带来的内存重分配次数</strong></p>\n<p>有两种手段：</p>\n<ol>\n<li><p>空间预分配<br>扩容的时候，会比所需的内存多分配一部分空闲内存（有两种公示决定额外分配多少内存）</p>\n</li>\n<li><p>惰性空间释放</p>\n<p>sds字符串缩短之后，内存不是马上回收，而是作为空闲内存保存</p>\n</li>\n</ol>\n</li>\n<li><p><strong>二进制安全</strong></p>\n<p>C字符串中的字符必须符合某种编码（比如ASCII）；sds没有这个限制；</p>\n</li>\n<li><p><strong>兼容部分C字符串函数</strong></p>\n<p>如果我们有一个保存文本数据的SDS值sds，那么我们就可以重用＜string.h＞&#x2F;strcasecmp函数，使用它来对比SDS保存的字符串和另一个C字符串：</p>\n</li>\n</ul>\n<h3 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h3><h4 id=\"示例图-1\"><a href=\"#示例图-1\" class=\"headerlink\" title=\"示例图\"></a>示例图</h4><p><img src=\"/./Redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E7%AC%94%E8%AE%B0/image-20211221123652853.png\" alt=\"image-20211221123652853\"></p>\n<h4 id=\"特点-1\"><a href=\"#特点-1\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li>双端</li>\n<li>无环</li>\n<li>带表头、表尾指针</li>\n<li>带长度计数器</li>\n<li>多态；可以保存不通类型的值</li>\n</ul>\n<h3 id=\"字典\"><a href=\"#字典\" class=\"headerlink\" title=\"字典\"></a>字典</h3><h4 id=\"示例图-2\"><a href=\"#示例图-2\" class=\"headerlink\" title=\"示例图\"></a>示例图</h4><p><img src=\"/./Redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E7%AC%94%E8%AE%B0/image-20211221124137128.png\" alt=\"image-20211221124137128\"></p>\n<p>ht属性是一个包含两个项的数组，数组中的每个项都是一个dictht哈希表，一般情况下，字典只使用ht[0]哈希表，ht[1]哈希表只会在对ht[0]哈希表进行rehash时使用。</p>\n<h4 id=\"扩容\"><a href=\"#扩容\" class=\"headerlink\" title=\"扩容\"></a>扩容</h4><ol>\n<li><p>服务器目前没有在执行BGSAVE命令或者BGREWRITEAOF命令，并且哈希表的负载因子大于等于1。</p>\n</li>\n<li><p>服务器目前正在执行BGSAVE命令或者BGREWRITEAOF命令，并且哈希表的负载因子大于等于5。</p>\n</li>\n</ol>\n<h4 id=\"收缩\"><a href=\"#收缩\" class=\"headerlink\" title=\"收缩\"></a>收缩</h4><p>当哈希表的负载因子小于0.1时，程序自动开始对哈希表执行收缩操作。</p>\n<h4 id=\"渐进式rehash\"><a href=\"#渐进式rehash\" class=\"headerlink\" title=\"渐进式rehash\"></a>渐进式rehash</h4><p>以下是哈希表渐进式rehash的详细步骤：</p>\n<p>1）为ht[1]分配空间，让字典同时持有ht[0]和ht[1]两个哈希表。</p>\n<p>2）在字典中维持一个索引计数器变量rehashidx，并将它的值设置为0，表示rehash工作正式开始。</p>\n<p>3）在rehash进行期间，每次对字典执行添加、删除、查找或者更新操作时，程序除了执行指定的操作以外，还会顺带将ht[0]哈希表在rehashidx索引上的所有键值对rehash到ht[1]，当rehash工作完成之后，程序将rehashidx属性的值增一。</p>\n<p>4）随着字典操作的不断执行，最终在某个时间点上，ht[0]的所有键值对都会被rehash至ht[1]，这时程序将rehashidx属性的值设为-1，表示rehash操作已完成。</p>\n<p>渐进式rehash的好处在于它采取分而治之的方式，将rehash键值对所需的计算工作均摊到对字典的每个添加、删除、查找和更新操作上，从而避免了集中式rehash而带来的庞大计算量。</p>\n<p>另外，在渐进式rehash执行期间，新添加到字典的键值对一律**会被保存到ht[1]**里面，而ht[0]则不再进行任何添加操作，这一措施保证了ht[0]包含的键值对数量会只减不增，并随着rehash操作的执行而最终变成空表。</p>\n<h3 id=\"跳跃表\"><a href=\"#跳跃表\" class=\"headerlink\" title=\"跳跃表\"></a>跳跃表</h3><h4 id=\"示例图-3\"><a href=\"#示例图-3\" class=\"headerlink\" title=\"示例图\"></a>示例图</h4><p><img src=\"/./Redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E7%AC%94%E8%AE%B0/image-20211223121705566.png\" alt=\"image-20211223121705566\"></p>\n<p>Redis只在两个地方用到了跳跃表，一个是实现有序集合键，另一个是在集群节点中用作内部数据结构。</p>\n<p>每个跳跃表节点的层高都是1至32之间的随机数</p>\n<h3 id=\"整数集合\"><a href=\"#整数集合\" class=\"headerlink\" title=\"整数集合\"></a>整数集合</h3><p>整数集合（intset）是集合键的底层实现之一，当一个集合<strong>只包含整数值元素</strong>，并且这个集合的<strong>元素数量不多</strong>时，Redis就会使用整数集合作为集合键的底层实现。</p>\n<h4 id=\"示例图-4\"><a href=\"#示例图-4\" class=\"headerlink\" title=\"示例图\"></a>示例图</h4><p><img src=\"/./Redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E7%AC%94%E8%AE%B0/image-20211223122023914.png\" alt=\"image-20211223122023914\"></p>\n<p>当向一个底层为int16_t数组的整数集合添加一个int64_t类型的整数值时，整数集合已有的所有元素都会被转换成int64_t类型</p>\n<h4 id=\"升级\"><a href=\"#升级\" class=\"headerlink\" title=\"升级\"></a>升级</h4><p>类型：int16_t，int32_t，int64_t</p>\n<p>当向一个底层为int16_t数组的整数集合添加一个int64_t类型的整数值时，整数集合已有的所有元素都会被转换成int64_t类型；</p>\n<p>整数集合<strong>不支持降级</strong>操作，一旦对数组进行了升级，编码就会一直保持升级后的状态。</p>\n<p><strong>好处</strong>：整数集合的升级策略有两个好处，一个是提升整数集合的灵活性，另一个是尽可能地节约内存。</p>\n<h3 id=\"压缩列表\"><a href=\"#压缩列表\" class=\"headerlink\" title=\"压缩列表\"></a>压缩列表</h3><p>压缩列表（ziplist）是列表键和哈希键的底层实现之一。当一个列表键只包含少量列表项，并且每个列表项要么就是小整数值，要么就是长度比较短的字符串，那么Redis就会使用压缩列表来做列表键的底层实现</p>\n<h4 id=\"示例图-5\"><a href=\"#示例图-5\" class=\"headerlink\" title=\"示例图\"></a>示例图</h4><p><img src=\"/./Redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E7%AC%94%E8%AE%B0/image-20211223122749578.png\" alt=\"image-20211223122749578\"></p>\n<p><img src=\"/./Redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E7%AC%94%E8%AE%B0/image-20211223123006023.png\" alt=\"image-20211223123006023\"></p>\n<h4 id=\"连锁更新\"><a href=\"#连锁更新\" class=\"headerlink\" title=\"连锁更新\"></a>连锁更新</h4><p>每个节点的previous_entry_length属性都记录了前一个节点的长度：</p>\n<p>❑如果前一节点的长度小于254字节，那么previous_entry_length属性需要用1字节长的空间来保存这个长度值。</p>\n<p>❑如果前一节点的长度大于等于254字节，那么previous_entry_length属性需要用5字节长的空间来保存这个长度值。</p>\n<p><img src=\"/./Redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E7%AC%94%E8%AE%B0/image-20211223123127507.png\" alt=\"image-20211223123127507\"></p>\n<p><img src=\"/./Redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E7%AC%94%E8%AE%B0/image-20211223123242022.png\" alt=\"image-20211223123242022\"></p>\n<h3 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h3><p>Redis的对象系统还实现了基于引用计数技术的内存回收机制，当程序不再使用某个对象的时候，这个对象所占用的内存就会被自动释放；</p>\n<h4 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h4><p><img src=\"/./Redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E7%AC%94%E8%AE%B0/image-20211223123903740.png\" alt=\"image-20211223123903740\"></p>\n<p><img src=\"/./Redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E7%AC%94%E8%AE%B0/image-20211223123845793.png\" alt=\"image-20211223123845793\"></p>\n<h4 id=\"共享对象\"><a href=\"#共享对象\" class=\"headerlink\" title=\"共享对象\"></a>共享对象</h4><p>Redis只对包含整数值的字符串对象进行共享。</p>\n<p><img src=\"/./Redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E7%AC%94%E8%AE%B0/image-20211223124409476.png\" alt=\"image-20211223124409476\"></p>\n<p>假设键A创建了一个包含整数值100的字符串对象作为值对象，如果这时键B也要创建一个同样保存了整数值100的字符串对象作为值对象，那么服务器让键A和键B共享同一个字符串对象；</p>\n<p>Redis会在初始化服务器时，创建一万个字符串对象，这些对象包含了从0到9999的所有整数值，当服务器需要用到值为0到9999的字符串对象时，服务器就会使用这些共享对象，而不是新创建对象。</p>\n<h1 id=\"第二部分：单机数据库的实现\"><a href=\"#第二部分：单机数据库的实现\" class=\"headerlink\" title=\"第二部分：单机数据库的实现\"></a>第二部分：单机数据库的实现</h1><h2 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h2><h4 id=\"示例图-6\"><a href=\"#示例图-6\" class=\"headerlink\" title=\"示例图\"></a>示例图</h4><p><img src=\"/./Redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E7%AC%94%E8%AE%B0/image-20211224121242433.png\" alt=\"image-20211224121242433\"></p>\n<p><img src=\"/./Redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E7%AC%94%E8%AE%B0/image-20211224121349312.png\" alt=\"image-20211224121349312\"></p>\n<h4 id=\"过期时间\"><a href=\"#过期时间\" class=\"headerlink\" title=\"过期时间\"></a>过期时间</h4><p>保存过期时间</p>\n<p>redisDb结构的expires字典保存了数据库中所有键的过期时间，我们称这个字典为过期字典：</p>\n<p>❑过期字典的键是一个指针，这个指针指向键空间中的某个键对象（也即是某个数据库键）。</p>\n<p>❑过期字典的值是一个long long类型的整数，这个整数保存了键所指向的数据库键的过期时间——一个毫秒精度的UNIX时间戳。</p>\n<h5 id=\"过期键删除策略\"><a href=\"#过期键删除策略\" class=\"headerlink\" title=\"过期键删除策略\"></a>过期键删除策略</h5><p>Redis服务器实际使用的是<strong>惰性删除</strong>和<strong>定期删除</strong>两种策略：通过配合使用这两种删除策略，服务器可以很好地在合理使用CPU时间和避免浪费内存空间之间取得平衡。</p>\n<ul>\n<li><p>惰性删除</p>\n<p>操作键的时候判断一下键是否过期，如果过期了则删除键，并且按照键不存在的方式处理命令</p>\n</li>\n<li><p>定期删除<br>过期键的定期删除策略由redis.c&#x2F;activeExpireCycle函数实现，每当Redis的服务器周期性操作redis.c&#x2F;serverCron函数执行时，activeExpireCycle函数就会被调用，<strong>它在规定的时间内，分多次遍历服务器中的各个数据库</strong>，从数据库的expires字典中<strong>随机</strong>检查一部分键的过期时间，并删除其中的过期键。</p>\n</li>\n</ul>\n<h5 id=\"AOF、RDB和复制功能对过期键的处理\"><a href=\"#AOF、RDB和复制功能对过期键的处理\" class=\"headerlink\" title=\"AOF、RDB和复制功能对过期键的处理\"></a>AOF、RDB和复制功能对过期键的处理</h5><ul>\n<li><p>生成RDB文件<br>  在执行SAVE命令或者BGSAVE命令创建一个新的RDB文件时，程序会对数据库中的键进行检查，<strong>已过期的键不会被保存</strong>到新创建的RDB文件中。</p>\n</li>\n<li><p>载入RDB文件</p>\n<p>如果服务器以主服务器模式运行，那么在载入RDB文件时，程序会对文件中保存的键进行检查，未过期的键会被载入到数据库中，而<strong>过期键则会被忽略，所以过期键对载入RDB文件的主服务器不会造成影响</strong>。如果是从服务器模式的话会<strong>所有键都载入</strong>，但是因为进行数据同步的时候从服务器的数据库会被清空，所以不会对数据库造成影响。</p>\n</li>\n<li><p>AOF文件写入<br>当过期键被惰性删除或者定期删除之后，程序会向AOF文件追加（append）一条DEL命令，来显式地记录该键已被删除。</p>\n</li>\n<li><p>AOF重写<br>和生成RDB文件时类似，在执行AOF重写的过程中，程序会对数据库中的键进行检查，<strong>已过期的键不会被保存到重写后的AOF文件中。</strong></p>\n</li>\n<li><p>复制<br>主服务器在删除一个过期键之后，会显式地向所有从服务器发送一个DEL命令，告知从服务器删除这个过期键。从服务器只有在接到主服务器发来的DEL命令之后，才会删除过期键。</p>\n</li>\n</ul>\n<h2 id=\"RDB持久化\"><a href=\"#RDB持久化\" class=\"headerlink\" title=\"RDB持久化\"></a>RDB持久化</h2><p>RDB文件是一个经过压缩的二进制文件，由多个部分组成</p>\n<p>有两个Redis命令可以用于生成RDB文件，一个是SAVE，另一个是BGSAVE。</p>\n<ul>\n<li><p>SAVE<br>SAVE命令会阻塞Redis服务器进程，直到RDB文件创建完毕为止，在服务器进程阻塞期间，服务器不能处理任何命令请求</p>\n</li>\n<li><p>BGSAVE<br>BGSAVE命令会派生出一个子进程，然后由子进程负责创建RDB文件，服务器进程（父进程）继续处理命令请求</p>\n</li>\n</ul>\n<h3 id=\"RDB载入\"><a href=\"#RDB载入\" class=\"headerlink\" title=\"RDB载入\"></a>RDB载入</h3><p>启动的时候自动载入</p>\n<p>如果服务器开启了AOF持久化功能，那么服务器会<strong>优先使用AOF文件</strong>来还原数据库状态。只有在AOF持久化功能处于关闭状态时，服务器才会使用RDB文件来还原数据库状态。</p>\n<h3 id=\"自动保存\"><a href=\"#自动保存\" class=\"headerlink\" title=\"自动保存\"></a>自动保存</h3><p>因为BGSAVE命令可以在不阻塞服务器进程的情况下执行，所以Redis允许用户通过设置服务器配置的save选项，让服务器每隔一段时间自动执行一次BGSAVE命令。</p>\n<p><img src=\"/./Redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E7%AC%94%E8%AE%B0/image-20211224123718806.png\" alt=\"image-20211224123718806\"></p>\n<h4 id=\"实现方式\"><a href=\"#实现方式\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h4><p>数据库维护dirty计数器和lastsave属性</p>\n<p>Redis的服务器周期性操作函数<strong>serverCron</strong>默认每隔100毫秒就会执行一次，该函数用于对正在运行的服务器进行维护，它的其中一项工作就是检查save选项所设置的保存条件是否已经满足，如果满足的话，就执行BGSAVE命令。</p>\n<h2 id=\"AOF持久化\"><a href=\"#AOF持久化\" class=\"headerlink\" title=\"AOF持久化\"></a>AOF持久化</h2><h3 id=\"AOF文件的写入与同步\"><a href=\"#AOF文件的写入与同步\" class=\"headerlink\" title=\"AOF文件的写入与同步\"></a>AOF文件的写入与同步</h3><p>因为服务器在处理文件事件时可能会执行写命令，使得一些内容被追加到aof_buf缓冲区里面，所以在服务器每次结束一个事件循环之前，它都会调用fushAppendOnlyFile函数，考虑是否需要将aof_buf缓冲区中的内容写入和保存到AOF文件里面</p>\n<p><img src=\"/./Redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E7%AC%94%E8%AE%B0/image-20211227121109237.png\" alt=\"image-20211227121109237\"></p>\n<h3 id=\"AOF文件的载入与数据还原\"><a href=\"#AOF文件的载入与数据还原\" class=\"headerlink\" title=\"AOF文件的载入与数据还原\"></a>AOF文件的载入与数据还原</h3><p>Redis读取AOF文件并还原数据库状态的详细步骤如下：</p>\n<p>1）创建一个不带网络连接的伪客户端（fake client）</p>\n<p>2）从AOF文件中分析并读取出一条写命令。</p>\n<p>3）使用伪客户端执行被读出的写命令。</p>\n<p>4）一直执行步骤2和步骤3，直到AOF文件中的所有写命令都被处理完毕为止。</p>\n<h3 id=\"AOF重写\"><a href=\"#AOF重写\" class=\"headerlink\" title=\"AOF重写\"></a>AOF重写</h3><p>虽然Redis将生成新AOF文件替换旧AOF文件的功能命名为“AOF文件重写”，但实际上，AOF文件重写并不需要对现有的AOF文件进行任何读取、分析或者写入操作，这个功能是通过读取服务器当前的数据库状态来实现的。</p>\n<p>首先从数据库中读取键现在的值，然后用一条命令去记录键值对，代替之前记录这个键值对的多条命令，这就是AOF重写功能的实现原理。</p>\n<h3 id=\"AOF后台重写\"><a href=\"#AOF后台重写\" class=\"headerlink\" title=\"AOF后台重写\"></a>AOF后台重写</h3><p>Redis不希望AOF重写造成服务器无法处理请求，所以Redis决定将AOF重写程序放到子进程里执行。</p>\n<p>子进程在重写期间，父进程还在接收命令，会出现数据不一致的情况。为了解决这种数据不一致问题，Redis服务器设置了一个AOF重写缓冲区，这个缓冲区在服务器创建子进程之后开始使用，当Redis服务器执行完一个写命令之后，它会同时将这个写命令发送给AOF缓冲区和AOF重写缓冲区。</p>\n<p>当子进程完成AOF重写工作之后，它会向父进程发送一个信号，父进程在接到该信号之后，会调用一个信号处理函数，并执行以下工作：</p>\n<ol>\n<li>将AOF重写缓冲区中的所有内容写入到新AOF文件中，这时新AOF文件所保存的数据库状态将和服务器当前的数据库状态一致。</li>\n<li>对新的AOF文件进行改名，原子地（atomic）覆盖现有的AOF文件，完成新旧两个AOF文件的替换。</li>\n</ol>\n<h2 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h2><p>Redis服务器是一个事件驱动程序，服务器需要处理以下两类事件：</p>\n<ul>\n<li><p>文件事件（file event）：Redis服务器通过套接字与客户端（或者其他Redis服务器）进行连接，而文件事件就是服务器对套接字操作的抽象。服务器与客户端（或者其他服务器）的通信会产生相应的文件事件，而服务器则通过监听并处理这些事件来完成一系列网络通信操作。</p>\n</li>\n<li><p>时间事件（time event）：Redis服务器中的一些操作（比如serverCron函数）需要在给定的时间点执行，而时间事件就是服务器对这类定时操作的抽象。</p>\n</li>\n</ul>\n<h3 id=\"文件事件\"><a href=\"#文件事件\" class=\"headerlink\" title=\"文件事件\"></a>文件事件</h3><p><img src=\"/./Redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E7%AC%94%E8%AE%B0/image-20211227122435497.png\" alt=\"image-20211227122435497\"></p>\n<p>尽管多个文件事件可能会并发地出现，但I&#x2F;O多路复用程序总是会将所有产生事件的套接字都放到一个队列里面，然后通过这个队列，以有序（sequentially）、同步（synchronously）、每次一个套接字的方式向文件事件分派器传送套接字</p>\n<h4 id=\"文件事件的处理器\"><a href=\"#文件事件的处理器\" class=\"headerlink\" title=\"文件事件的处理器\"></a>文件事件的处理器</h4><p>Redis为文件事件编写了多个处理器，这些事件处理器分别用于实现不同的网络通信需求，比如说：</p>\n<ul>\n<li><p>为了对连接服务器的各个客户端进行应答，服务器要为监听套接字关联<strong>连接应答处理器</strong>。<br>当<strong>Redis服务器进行初始化</strong>的时候，程序会将这个连接应答处理器和服务器监听套接字的<strong>AE_READABLE</strong>事件关联起来，当有客户端用sys&#x2F;socket.h&#x2F;connect函数连接服务器监听套接字的时候，套接字就会产生AE_READABLE事件，引发连接应答处理器执行，并执行相应的套接字应答操作。</p>\n</li>\n<li><p>为了接收客户端传来的命令请求，服务器要为客户端套接字关联<strong>命令请求处理器</strong>。<br>当一个客户端<strong>通过连接应答处理器成功连接到服务器</strong>之后，服务器会将客户端套接字的<strong>AE_READABLE</strong>事件和命令请求处理器关联起来，当客户端向服务器发送命令请求的时候，套接字就会产生AE_READABLE事件，引发命令请求处理器执行，并执行相应的套接字读入操作。在客户端连接服务器的整个过程中，服务器都会一直为客户端套接字的AE_READABLE事件关联命令请求处理器。</p>\n</li>\n<li><p>为了向客户端返回命令的执行结果，服务器要为客户端套接字关联<strong>命令回复处理器</strong>。<br>当<strong>服务器有命令回复需要传送给客户端的时候</strong>，服务器会将客户端套接字的AE_WRITABLE事件和命令回复处理器关联起来，当客户端准备好接收服务器传回的命令回复时，就会产生AE_WRITABLE事件，引发命令回复处理器执行，并执行相应的套接字写入操作。当服务器有命令回复需要传送给客户端的时候，服务器会将客户端套接字的AE_WRITABLE事件和命令回复处理器关联起来。当命令回复发送完毕之后，服务器就会<strong>解除</strong>命令回复处理器与客户端套接字的AE_WRITABLE事件之间的关联。</p>\n</li>\n<li><p>当主服务器和从服务器进行复制操作时，主从服务器都需要关联特别为复制功能编写的复制处理器。</p>\n</li>\n</ul>\n<h3 id=\"时间事件\"><a href=\"#时间事件\" class=\"headerlink\" title=\"时间事件\"></a>时间事件</h3><p>Redis的时间事件分为以下两类：</p>\n<ul>\n<li><p>定时事件：让一段程序在指定的时间之后执行一次。比如说，让程序X在当前时间的30毫秒之后执行一次。</p>\n</li>\n<li><p>周期性事件：让一段程序每隔指定时间就执行一次。比如说，让程序Y每隔30毫秒就执行一次。</p>\n</li>\n</ul>\n<p>目前版本的Redis只使用周期性事件，而没有使用定时事件。</p>\n<h4 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h4><p>服务器将所有时间事件都放在一个无序链表中，每当时间事件执行器运行时，它就<strong>遍历整个链表</strong>，查找所有已到达的时间事件，并调用相应的事件处理器。</p>\n<p>在目前版本中，正常模式下的Redis服务器只使用serverCron一个时间事件，在这种情况下，服务器几乎是将<strong>无序链表退化成一个指针来使用</strong>，所以使用无序链表来保存时间事件，<strong>并不影响事件执行的性能</strong>。</p>\n<h2 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h2><p>Redis通过使用由I&#x2F;O多路复用技术实现的文件事件处理器，Redis服务器使用单线程单进程的方式来处理命令请求，并与多个客户端进行网络通信。</p>\n<p>Redis服务器状态结构的clients属性是一个链表，这个链表保存了所有与服务器连接的客户端的状态结构，对客户端执行批量操作，或者查找某个指定的客户端，都可以通过遍历clients链表来完成。</p>\n<h3 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h3><ol>\n<li>客户端的套接字描述符。</li>\n<li>客户端的名字。</li>\n<li>客户端的标志值（fag）。</li>\n<li>指向客户端正在使用的数据库的指针，以及该数据库的号码。</li>\n<li>客户端当前要执行的命令、命令的参数、命令参数的个数，以及指向命令实现函数的指针。</li>\n<li>客户端的输入缓冲区和输出缓冲区。</li>\n<li>客户端的复制状态信息，以及进行复制所需的数据结构。</li>\n<li>客户端执行BRPOP、BLPOP等列表阻塞命令时使用的数据结构。</li>\n<li>客户端的事务状态，以及执行WATCH命令时用到的数据结构。</li>\n<li>客户端执行发布与订阅功能时用到的数据结构。</li>\n<li>客户端的身份验证标志。</li>\n<li>客户端的创建时间，客户端和服务器最后一次通信的时间，以及客户端的输出缓冲区大小超出软性限制（soft limit）的时间。</li>\n</ol>\n<h3 id=\"示例图-7\"><a href=\"#示例图-7\" class=\"headerlink\" title=\"示例图\"></a>示例图</h3><p><img src=\"/./Redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E7%AC%94%E8%AE%B0/image-20220108142751976.png\" alt=\"image-20220108142751976\"></p>\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><p>通常情况下，Redis只会将那些对数据库进行了修改的命令写入到AOF文件，并复制到各个从服务器。如果一个命令没有对数据库进行任何修改，那么它就会被认为是只读命令，这个命令不会被写入到AOF文件，也不会被复制到从服务器。</p>\n<p>以上规则适用于绝大部分Redis命令，但PUBSUB命令和SCRIPT LOAD命令是其中的例外。PUBSUB命令虽然没有修改数据库，但PUBSUB命令向频道的所有订阅者发送消息这一行为带有副作用，接收到消息的所有客户端的状态都会因为这个命令而改变。因此，服务器需要使用REDIS_FORCE_AOF标志，强制将这个命令写入AOF文件，这样在将来载入AOF文件时，服务器就可以再次执行相同的PUBSUB命令，并产生相同的副作用。</p>\n<h3 id=\"伪客户端\"><a href=\"#伪客户端\" class=\"headerlink\" title=\"伪客户端\"></a>伪客户端</h3><ol>\n<li><p>Lua</p>\n<p>lua_client伪客户端在服务器运行的整个生命期中会一直存在，只有服务器被关闭时，这个客户端才会被关闭。</p>\n</li>\n<li><p>载入AOF文件</p>\n<p>服务器在载入AOF文件时，会创建用于执行AOF文件包含的Redis命令的伪客户端，并在载入完成之后，关闭这个伪客户端。</p>\n</li>\n</ol>\n<h2 id=\"服务器\"><a href=\"#服务器\" class=\"headerlink\" title=\"服务器\"></a>服务器</h2><h3 id=\"命令请求的执行过程（重要）\"><a href=\"#命令请求的执行过程（重要）\" class=\"headerlink\" title=\"命令请求的执行过程（重要）\"></a>命令请求的执行过程（重要）</h3><ol>\n<li><p>发送命令请求</p>\n<p><img src=\"/./Redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E7%AC%94%E8%AE%B0/image-20220108144056270.png\" alt=\"image-20220108144056270\"></p>\n</li>\n<li><p>读取命令请求<br>当客户端与服务器之间的<strong>连接套接字</strong>因为客户端的写入而变得<strong>可读</strong>时，服务器将调用<strong>命令请求处理器</strong>来执行以下操作：</p>\n<ul>\n<li>读取套接字中协议格式的命令请求，并将其保存到客户端状态的<strong>输入缓冲区</strong>里面。</li>\n<li>对输入缓冲区中的命令请求进行<strong>分析</strong>，提取出命令请求中包含的<strong>命令参数</strong>，以及命令参数的个数，然后分别将参数和参数个数保存到客户端状态的argv属性和argc属性里面。</li>\n<li>调用<strong>命令执行器</strong>，执行客户端指定的命令。</li>\n</ul>\n<p>命令执行器：</p>\n<ul>\n<li>去命令表查找<strong>命令的实现函数</strong></li>\n<li>执行预备操作：<ol>\n<li>检查参数是否正确； </li>\n<li>检查身份是否验证； </li>\n<li>检查内存使用情况</li>\n<li>检查是否在订阅模式，如果是，只会接收SUBSCRIBE、PSUBSCRIBE、UNSUBSCRIBE、PUNSUBSCRIBE四个命令</li>\n<li>检查是否在Lua脚本阻塞状态，如果是则拒绝命令</li>\n<li>检查是否在执行事务，如果是则只会执行EXEC、DISCARD、MULTI、WATCH四个命令</li>\n<li>检查服务器是否在进行数据载入，如果是则客户端发送的命令必须带有l标识（比如INFO、SHUTDOWN、PUBLISH等等）才会被服务器执行</li>\n</ol>\n</li>\n<li>调用<strong>命令的实现函数</strong>，并将结果放在输出缓冲区</li>\n<li>执行后续工作<ol>\n<li>记录慢查询日志</li>\n<li>记录aop文件</li>\n<li>如果有从服务器复制这个服务器，则会执行命令传播给所有从服务器</li>\n<li>记录调用次数</li>\n</ol>\n</li>\n</ul>\n</li>\n<li><p>将命令回复给客户端<br>当客户端套接字变为<strong>可写状态</strong>时，服务器就会执行<strong>命令回复处理器</strong>，将保存在客户端<strong>输出缓冲区</strong>中的命令回复发送给客户端。</p>\n</li>\n<li><p>客户端打印回复内容</p>\n</li>\n</ol>\n<h3 id=\"serverCron函数\"><a href=\"#serverCron函数\" class=\"headerlink\" title=\"serverCron函数\"></a>serverCron函数</h3><p>每100ms运行一次</p>\n<h4 id=\"作用：\"><a href=\"#作用：\" class=\"headerlink\" title=\"作用：\"></a>作用：</h4><ol>\n<li>更新服务器时间缓存<br>避免每次获取时间的时候都执行系统调用，直接在内存中维护了时间</li>\n<li>更新服务器每秒执行的次数</li>\n<li>更新服务器内存峰值记录</li>\n<li>处理SIGTERM信号</li>\n<li>管理客户端资源<br>如果客户端链接超时则会释放这个客户端；如果输入缓冲区的大小超过了一定的长度，则会释放当前的输入缓冲区，并重新创建一个，以防客户端的输入缓冲区耗费太多内存。</li>\n<li>管理数据库资源<br>删除过期键</li>\n<li>执行被延迟的BGREWRITEAOF</li>\n<li>将AOF缓冲区中的内容写入AOF文件</li>\n<li>关闭异步客户端</li>\n</ol>\n<h3 id=\"初始化服务器\"><a href=\"#初始化服务器\" class=\"headerlink\" title=\"初始化服务器\"></a>初始化服务器</h3><p>一个Redis服务器从启动到能够接受客户端的命令请求，需要经过一系列的初始化和设置过程，比如初始化服务器状态，接受用户指定的服务器配置，创建相应的数据结构和网络连接等等。</p>\n<h1 id=\"第三部分：多机数据库的实现\"><a href=\"#第三部分：多机数据库的实现\" class=\"headerlink\" title=\"第三部分：多机数据库的实现\"></a>第三部分：多机数据库的实现</h1><h2 id=\"复制\"><a href=\"#复制\" class=\"headerlink\" title=\"复制\"></a>复制</h2><p>在Redis中，用户可以通过执行SLAVEOF命令或者设置slaveof选项，让一个服务器去复制（replicate）另一个服务器，我们称呼被复制的服务器为主服务器（master），而对主服务器进行复制的服务器则被称为从服务器（slave）。</p>\n<h4 id=\"旧版复制功能\"><a href=\"#旧版复制功能\" class=\"headerlink\" title=\"旧版复制功能\"></a>旧版复制功能</h4><p>Redis的复制功能分为<strong>同步</strong>（sync）和<strong>命令传播</strong>（command propagate）两个操作：</p>\n<h5 id=\"同步\"><a href=\"#同步\" class=\"headerlink\" title=\"同步\"></a>同步</h5><p>从服务器对主服务器的同步操作需要通过向主服务器发送<strong>SYNC命令</strong>来完成，以下是SYNC命令的执行步骤：</p>\n<ol>\n<li>从服务器向主服务器发送SYNC命令。</li>\n<li>收到SYNC命令的主服务器执行BGSAVE命令，在<strong>后台</strong>生成一个RDB文件，并使用一个<strong>缓冲区记录从现在开始执行的所有写命令</strong>。</li>\n<li>当主服务器的BGSAVE命令执行完毕时，主服务器会将BGSAVE命令生成的RDB文件发送给从服务器，从服务器接收并载入这个RDB文件，将自己的数据库状态更新至主服务器执行BGSAVE命令时的数据库状态。</li>\n<li>主服务器将记录在缓冲区里面的所有写命令发送给从服务器，从服务器执行这些写命令，将自己的数据库状态更新至主服务器数据库当前所处的状态。</li>\n</ol>\n<p><img src=\"/./Redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E7%AC%94%E8%AE%B0/image-20220108150337037.png\" alt=\"image-20220108150337037\"></p>\n<h5 id=\"命令传播\"><a href=\"#命令传播\" class=\"headerlink\" title=\"命令传播\"></a>命令传播</h5><p>为了让主从服务器再次回到一致状态，主服务器需要对从服务器执行命令传播操作：主服务器会将自己执行的写命令，也即是造成主从服务器不一致的那条写命令，发送给从服务器执行，当从服务器执行了相同的写命令之后，主从服务器将再次回到一致状态。</p>\n<h5 id=\"缺陷\"><a href=\"#缺陷\" class=\"headerlink\" title=\"缺陷\"></a>缺陷</h5><p>SYNC命令是一个非常耗费资源的操作（主服务器需要生成RDB文件，从服务器需要载入RDB文件，网络需要传输RDB文件）；当从服务器断线重连之后，需要通过SYNC从头同步整个数据库。</p>\n<h4 id=\"新版复制功能\"><a href=\"#新版复制功能\" class=\"headerlink\" title=\"新版复制功能\"></a>新版复制功能</h4><p>使用PSYNC命令代替SYNC命令来执行复制时的同步操作。PSYNC命令具有完整重同步（full resynchronization）和部分重同步（partialresynchronization）两种模式。</p>\n<h5 id=\"完整重同步\"><a href=\"#完整重同步\" class=\"headerlink\" title=\"完整重同步\"></a>完整重同步</h5><p>用于初次复制的情况</p>\n<h5 id=\"部分重同步\"><a href=\"#部分重同步\" class=\"headerlink\" title=\"部分重同步\"></a>部分重同步</h5><p>主服务器维护一个固定长度的<strong>复制积压缓冲区</strong></p>\n<p>从服务器断线重新复制的时候，告诉主服务器复制的偏移量，主服务器如果发现断线期间新增的数据还在<strong>复制积压缓冲区</strong>中，则会执行部分重同步，否则执行完整重同步。</p>\n<p><img src=\"/./Redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E7%AC%94%E8%AE%B0/image-20220108150821262.png\" alt=\"image-20220108150821262\"></p>\n<h2 id=\"Sentinel\"><a href=\"#Sentinel\" class=\"headerlink\" title=\"Sentinel\"></a>Sentinel</h2><p>Sentinel（哨岗、哨兵）是Redis的<strong>高可用性</strong>（high availability）解决方案：由一个或多个Sentinel实例（instance）组成的Sentinel系统（system）可以监视任意多个主服务器，以及这些主服务器属下的所有从服务器，并在被监视的主服务器进入下线状态时，自动将下线主服务器属下的某个从服务器升级为新的主服务器，然后由新的主服务器代替已下线的主服务器继续处理命令请求。</p>\n<h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><h4 id=\"启动并初始化Sentinel\"><a href=\"#启动并初始化Sentinel\" class=\"headerlink\" title=\"启动并初始化Sentinel\"></a>启动并初始化Sentinel</h4><ol>\n<li><p>首先，因为Sentinel本质上只是一个运行在特殊模式下的Redis服务器，所以启动Sentinel的第一步，就是初始化一个普通的Redis服务器。</p>\n</li>\n<li><p>启动Sentinel的第二个步骤就是将一部分普通Redis服务器使用的代码替换成Sentinel专用代码</p>\n</li>\n<li><p>在应用了Sentinel的专用代码之后，接下来，服务器会初始化一个sentinel.c&#x2F;sentinelState结构（后面简称“Sentinel状态”），这个结构保存了服务器中所有和Sentinel功能有关的状</p>\n</li>\n<li><p>初始化Sentinel状态的masters属性</p>\n</li>\n<li><p>初始化Sentinel的最后一步是创建连向被监视主服务器的网络连接，Sentinel将成为主服务器的客户端，它可以向主服务器发送命令，并从命令回复中获取相关的信息。</p>\n</li>\n</ol>\n<h4 id=\"获取主服务器的信息\"><a href=\"#获取主服务器的信息\" class=\"headerlink\" title=\"获取主服务器的信息\"></a>获取主服务器的信息</h4><p>Sentinel默认会以每十秒一次的频率，通过命令连接向被监视的主服务器发送INFO命令，并通过分析INFO命令的回复来获取主服务器的当前信息。</p>\n<h4 id=\"获取从服务器的信息\"><a href=\"#获取从服务器的信息\" class=\"headerlink\" title=\"获取从服务器的信息\"></a>获取从服务器的信息</h4><p>当Sentinel发现主服务器有新的从服务器出现时，Sentinel除了会为这个新的从服务器创建相应的实例结构之外，Sentinel还会创建连接到从服务器的命令连接和订阅连接。在创建命令连接之后，Sentinel在默认情况下，会以每十秒一次的频率通过命令连接向从服务器发送INFO命令。</p>\n<h4 id=\"向主服务器和从服务器发送信息\"><a href=\"#向主服务器和从服务器发送信息\" class=\"headerlink\" title=\"向主服务器和从服务器发送信息\"></a>向主服务器和从服务器发送信息</h4><p>在默认情况下，Sentinel会以每两秒一次的频率，通过命令连接向所有被监视的主服务器和从服务器发送命令告诉监视的服务器自己的信息。</p>\n<h4 id=\"接收来自主服务器和从服务器的频道信息\"><a href=\"#接收来自主服务器和从服务器的频道信息\" class=\"headerlink\" title=\"接收来自主服务器和从服务器的频道信息\"></a>接收来自主服务器和从服务器的频道信息</h4><p>对于每个与Sentinel连接的服务器，Sentinel既通过命令连接向服务器的__sentinel__:hello频道发送信息，又通过订阅连接从服务器的__sentinel__:hello频道接收信息。</p>\n<p>对于监视同一个服务器的多个Sentinel来说，一个Sentinel发送的信息会被其他Sentinel接收到，这些信息会被用于更新其他Sentinel对发送信息Sentinel的认知，也会被用于更新其他Sentinel对被监视服务器的认知。</p>\n<p>因为一个Sentinel可以通过分析接收到的频道信息来<strong>获知其他Sentinel的存在</strong>，并通过发送频道信息来<strong>让其他Sentinel知道自己的存在</strong>，所以用户在使用Sentinel的时候并不需要提供各个Sentinel的地址信息，监视同一个主服务器的多个Sentinel<strong>可以自动发现对方</strong>。</p>\n<h4 id=\"创建连向其他Sentinel的命令连接\"><a href=\"#创建连向其他Sentinel的命令连接\" class=\"headerlink\" title=\"创建连向其他Sentinel的命令连接\"></a>创建连向其他Sentinel的命令连接</h4><p>当Sentinel通过频道信息发现一个新的Sentinel时，它不仅会为新Sentinel在sentinels字典中创建相应的实例结构，还会创建一个连向新Sentinel的<strong>命令连接</strong>，但不会创建<strong>订阅连接</strong>。</p>\n<h3 id=\"故障转移\"><a href=\"#故障转移\" class=\"headerlink\" title=\"故障转移\"></a>故障转移</h3><h4 id=\"检测主观下线\"><a href=\"#检测主观下线\" class=\"headerlink\" title=\"检测主观下线\"></a>检测主观下线</h4><p>在默认情况下，Sentinel会以每秒一次的频率向所有与它创建了命令连接的实例（包括主服务器、从服务器、其他Sentinel在内）发送PING命令，并通过实例返回的PING命令回复来判断实例是否在线。</p>\n<h4 id=\"检测客观下线\"><a href=\"#检测客观下线\" class=\"headerlink\" title=\"检测客观下线\"></a>检测客观下线</h4><p>当Sentinel将一个主服务器判断为主观下线之后，为了确认这个主服务器是否真的下线了，它会向同样监视这一主服务器的<strong>其他Sentinel进行询问</strong>，看它们是否也认为主服务器已经进入了下线状态（可以是主观下线或者客观下线）。当Sentinel从其他Sentinel那里接收到足够数量的已下线判断之后，Sentinel就会将从服务器判定为<strong>客观下线</strong>，并对主服务器<strong>执行故障转移操作</strong>。</p>\n<h4 id=\"选举领头Sentinel\"><a href=\"#选举领头Sentinel\" class=\"headerlink\" title=\"选举领头Sentinel\"></a>选举领头Sentinel</h4><p>当一个主服务器被判断为客观下线时，监视这个下线主服务器的各个Sentinel会进行协商，选举出一个领头Sentinel，并由领头Sentinel对下线主服务器执行故障转移操作。</p>\n<p>如果有某个Sentinel被半数以上的Sentinel设置成了局部领头Sentinel，那么这个Sentinel成为领头Sentinel</p>\n<h4 id=\"故障转移-1\"><a href=\"#故障转移-1\" class=\"headerlink\" title=\"故障转移\"></a>故障转移</h4><ol>\n<li>在已下线主服务器属下的所有从服务器里面，挑选出一个从服务器，并将其转换为主服务器。<br>选举策略：<ul>\n<li>删除不可用、或者有较长一段时间没有通信的从服务器；</li>\n<li>根据优先级比较高、复制偏移量比较大的从服务器中选；</li>\n<li>如果都一样，则选举<strong>运行id最小</strong>的那个从服务器；</li>\n</ul>\n</li>\n<li>让已下线主服务器属下的所有从服务器改为复制新的主服务器。</li>\n<li>将已下线主服务器设置为新的主服务器的从服务器，当这个旧的主服务器重新上线时，它就会成为新的主服务器的从服务器。</li>\n</ol>\n<h2 id=\"集群\"><a href=\"#集群\" class=\"headerlink\" title=\"集群\"></a>集群</h2><p>Redis集群是Redis提供的分布式数据库方案，集群通过分片（sharding）来进行数据共享，并提供复制和故障转移功能。</p>\n<h3 id=\"节点\"><a href=\"#节点\" class=\"headerlink\" title=\"节点\"></a>节点</h3><p>节点会继续使用redisServer结构来保存服务器的状态，使用redisClient结构来保存客户端的状态，至于那些只有在集群模式下才会用到的数据，节点将它们保存到了<strong>cluster.h&#x2F;clusterNode结构、cluster.h&#x2F;clusterLink结构，以及cluster.h&#x2F;clusterState结构</strong>里面。</p>\n<h4 id=\"集群数据结构\"><a href=\"#集群数据结构\" class=\"headerlink\" title=\"集群数据结构\"></a>集群数据结构</h4><ul>\n<li><p>clusterNode</p>\n<p><strong>clusterNode结构</strong>保存了一个节点的当前状态，比如节点的创建时间、节点的名字、节点当前的配置纪元、节点的IP地址和端口号。</p>\n</li>\n<li><p>clusterLink</p>\n<p>clusterNode结构的link属性是一个<strong>clusterLink结构</strong>，该结构保存了连接节点所需的有关信息，比如套接字描述符，输入缓冲区和输出缓冲区。<br>redisClient结构和clusterLink结构都有自己的套接字描述符和输入、输出缓冲区，这两个结构的区别在于，redisClient结构中的套接字和缓冲区是用于<strong>连接客户端</strong>的，而clusterLink结构中的套接字和缓冲区则是用于<strong>连接节点</strong>的。</p>\n</li>\n<li><p>clusterState<br>每个节点都保存着一个clusterState结构，这个结构记录了在当前节点的视角下，集群目前所处的状态，例如集群是在线还是下线，集群包含多少个节点，集群当前的配置纪元。</p>\n</li>\n</ul>\n<h3 id=\"槽指派\"><a href=\"#槽指派\" class=\"headerlink\" title=\"槽指派\"></a>槽指派</h3><p>Redis集群通过分片的方式来保存数据库中的键值对：集群的整个数据库被分为16384个槽（slot），数据库中的每个键都属于这16384个槽的其中一个，集群中的每个节点可以处理0个或最多16384个槽。</p>\n<p>当数据库中的16384个槽都有节点在处理时，集群处于上线状态（ok）；相反地，如果数据库中有任何一个槽没有得到处理，那么集群处于下线状态（fail）。</p>\n<p>通过向节点发送CLUSTER ADDSLOTS命令，我们可以将一个或多个槽指派（assign）给节点负责。</p>\n<p><strong>clusterNode结构</strong>的<strong>slots属性</strong>和numslot属性记录了节点负责处理哪些槽。</p>\n<h4 id=\"传播节点的槽指派信息\"><a href=\"#传播节点的槽指派信息\" class=\"headerlink\" title=\"传播节点的槽指派信息\"></a>传播节点的槽指派信息</h4><p>一个节点除了会将自己负责处理的槽记录在clusterNode结构的slots属性和numslots属性之外，它还会将自己的slots数组通过消息发送给集群中的其他节点，以此来告知其他节点自己目前负责处理哪些槽。</p>\n<p>当节点A通过消息从节点B那里接收到节点B的slots数组时，节点A会在自己的clusterState.nodes字典中查找节点B对应的clusterNode结构，并对结构中的slots数组进行<strong>保存或者更新</strong>。</p>\n<h4 id=\"记录集群所有槽的指派信息\"><a href=\"#记录集群所有槽的指派信息\" class=\"headerlink\" title=\"记录集群所有槽的指派信息\"></a>记录集群所有槽的指派信息</h4><p>clusterState结构中的slots数组记录了集群中所有16384个槽的指派信息</p>\n<p>slots数组包含16384个项，每个数组项都是一个指向clusterNode结构的指针：</p>\n<p><img src=\"/./Redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E7%AC%94%E8%AE%B0/image-20220108154212058.png\" alt=\"image-20220108154212058\"></p>\n<h4 id=\"注意-1\"><a href=\"#注意-1\" class=\"headerlink\" title=\"注意\"></a>注意</h4><p>clusterNode.slots数组和clusterState.slots数组都保存了槽指派信息；为什么分两份存，主要是考虑操作性能。</p>\n<h3 id=\"在集群中执行命令\"><a href=\"#在集群中执行命令\" class=\"headerlink\" title=\"在集群中执行命令\"></a>在集群中执行命令</h3><p>当客户端向节点发送与数据库键有关的命令时，接收命令的节点会计算出命令要处理的数据库键属于哪个槽，并检查这个槽是否指派给了自己：</p>\n<ol>\n<li><p>如果键所在的槽正好就指派给了当前节点，那么节点直接执行这个命令。</p>\n</li>\n<li><p>如果键所在的槽并没有指派给当前节点，那么节点会向客户端返回一个<strong>MOVED错误</strong>，指引客户端转向（redirect）至正确的节点，并再次发送之前想要执行的命令。</p>\n</li>\n</ol>\n<h3 id=\"节点数据库的实现\"><a href=\"#节点数据库的实现\" class=\"headerlink\" title=\"节点数据库的实现\"></a>节点数据库的实现</h3><p>集群节点保存键值对以及键值对过期时间的方式</p>\n<p>节点和单机服务器在数据库方面的一个区别是，<strong>节点只能使用0号数据库</strong>，而单机Redis服务器则没有这一限制。</p>\n<h3 id=\"复制与故障转移\"><a href=\"#复制与故障转移\" class=\"headerlink\" title=\"复制与故障转移\"></a>复制与故障转移</h3><p>Redis集群中的节点分为主节点（master）和从节点（slave），其中主节点用于处理槽，而从节点则用于复制某个主节点，并在被复制的主节点下线时，代替下线主节点继续处理命令请求。</p>\n<p>一个节点成为从节点，并开始复制某个主节点这一信息会通过消息发送给集群中的其他节点，最终集群中的所有节点都会知道某个从节点正在复制某个主节点。</p>\n<p>集群中的所有节点都会在代表主节点的clusterNode结构的slaves属性和numslaves属性中记录正在复制这个主节点的从节点名单。</p>\n<h4 id=\"故障检测\"><a href=\"#故障检测\" class=\"headerlink\" title=\"故障检测\"></a>故障检测</h4><p>集群中的每个节点都会定期地向集群中的其他节点发送PING消息，以此来检测对方是否在线，如果接收PING消息的节点没有在规定的时间内，向发送PING消息的节点返回PONG消息，那么发送PING消息的节点就会将接收PING消息的节点标记为<strong>疑似下线</strong>（probable fail，PFAIL）。</p>\n<p>如果在一个集群里面，<strong>半数</strong>以上负责处理槽的主节点都将某个主节点x报告为<strong>疑似下线</strong>，那么这个主节点x将被标记为<strong>已下线</strong></p>\n<h4 id=\"故障转移-2\"><a href=\"#故障转移-2\" class=\"headerlink\" title=\"故障转移\"></a>故障转移</h4><p>当一个从节点发现自己正在复制的主节点进入了已下线状态时，从节点将开始对下线主节点进行故障转移，以下是故障转移的执行步骤：</p>\n<ol>\n<li>复制下线主节点的所有从节点里面，会有一个从节点被选中。</li>\n<li>被选中的从节点会执行SLAVEOF no one命令，成为新的主节点。</li>\n<li>新的主节点会撤销所有对已下线主节点的槽指派，并将这些槽全部指派给自己。</li>\n<li>新的主节点向集群广播一条PONG消息，这条PONG消息可以让集群中的其他节点立即知道这个节点已经由从节点变成了主节点，并且这个主节点已经接管了原本由已下线节点负责处理的槽。</li>\n<li>新的主节点开始接收和自己负责处理的槽有关的命令请求，故障转移完成。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h2><h3 id=\"简单动态字符串\"><a href=\"#简单动态字符串\" class=\"headerlink\" title=\"简单动态字符串\"></a>简单动态字符串</h3><p>SDS跟C语言一样是个char字符数组；</p>\n<p>一个sds对象有free、len属性记录空余空间和当前字符串长度</p>\n<h4 id=\"示例图\"><a href=\"#示例图\" class=\"headerlink\" title=\"示例图\"></a>示例图</h4><p><img src=\"/./Redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E7%AC%94%E8%AE%B0/image-20211221122226731.png\" alt=\"image-20211221122226731\"></p>\n<h4 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li><p><strong>常数复杂度获取字符串长度</strong><br>直接从free、len属性获取</p>\n</li>\n<li><p><strong>杜绝缓冲区溢出</strong><br>C语言字符串拼接时都假定分配的内存足够，如果这个假定不成立就会产生缓冲区溢出；<br>当SDS API需要对SDS进行修改时，API会先检查SDS的空间是否满足修改所需的要求，如果不满足的话，<strong>API会自动将SDS的空间扩展至执行修改所需的大小</strong>，然后才执行实际的修改操作，所以使用SDS既不需要手动修改SDS的空间大小，也不会出现前面所说的缓冲区溢出问题</p>\n</li>\n<li><p><strong>减少修改字符串时带来的内存重分配次数</strong></p>\n<p>有两种手段：</p>\n<ol>\n<li><p>空间预分配<br>扩容的时候，会比所需的内存多分配一部分空闲内存（有两种公示决定额外分配多少内存）</p>\n</li>\n<li><p>惰性空间释放</p>\n<p>sds字符串缩短之后，内存不是马上回收，而是作为空闲内存保存</p>\n</li>\n</ol>\n</li>\n<li><p><strong>二进制安全</strong></p>\n<p>C字符串中的字符必须符合某种编码（比如ASCII）；sds没有这个限制；</p>\n</li>\n<li><p><strong>兼容部分C字符串函数</strong></p>\n<p>如果我们有一个保存文本数据的SDS值sds，那么我们就可以重用＜string.h＞&#x2F;strcasecmp函数，使用它来对比SDS保存的字符串和另一个C字符串：</p>\n</li>\n</ul>\n<h3 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h3><h4 id=\"示例图-1\"><a href=\"#示例图-1\" class=\"headerlink\" title=\"示例图\"></a>示例图</h4><p><img src=\"/./Redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E7%AC%94%E8%AE%B0/image-20211221123652853.png\" alt=\"image-20211221123652853\"></p>\n<h4 id=\"特点-1\"><a href=\"#特点-1\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li>双端</li>\n<li>无环</li>\n<li>带表头、表尾指针</li>\n<li>带长度计数器</li>\n<li>多态；可以保存不通类型的值</li>\n</ul>\n<h3 id=\"字典\"><a href=\"#字典\" class=\"headerlink\" title=\"字典\"></a>字典</h3><h4 id=\"示例图-2\"><a href=\"#示例图-2\" class=\"headerlink\" title=\"示例图\"></a>示例图</h4><p><img src=\"/./Redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E7%AC%94%E8%AE%B0/image-20211221124137128.png\" alt=\"image-20211221124137128\"></p>\n<p>ht属性是一个包含两个项的数组，数组中的每个项都是一个dictht哈希表，一般情况下，字典只使用ht[0]哈希表，ht[1]哈希表只会在对ht[0]哈希表进行rehash时使用。</p>\n<h4 id=\"扩容\"><a href=\"#扩容\" class=\"headerlink\" title=\"扩容\"></a>扩容</h4><ol>\n<li><p>服务器目前没有在执行BGSAVE命令或者BGREWRITEAOF命令，并且哈希表的负载因子大于等于1。</p>\n</li>\n<li><p>服务器目前正在执行BGSAVE命令或者BGREWRITEAOF命令，并且哈希表的负载因子大于等于5。</p>\n</li>\n</ol>\n<h4 id=\"收缩\"><a href=\"#收缩\" class=\"headerlink\" title=\"收缩\"></a>收缩</h4><p>当哈希表的负载因子小于0.1时，程序自动开始对哈希表执行收缩操作。</p>\n<h4 id=\"渐进式rehash\"><a href=\"#渐进式rehash\" class=\"headerlink\" title=\"渐进式rehash\"></a>渐进式rehash</h4><p>以下是哈希表渐进式rehash的详细步骤：</p>\n<p>1）为ht[1]分配空间，让字典同时持有ht[0]和ht[1]两个哈希表。</p>\n<p>2）在字典中维持一个索引计数器变量rehashidx，并将它的值设置为0，表示rehash工作正式开始。</p>\n<p>3）在rehash进行期间，每次对字典执行添加、删除、查找或者更新操作时，程序除了执行指定的操作以外，还会顺带将ht[0]哈希表在rehashidx索引上的所有键值对rehash到ht[1]，当rehash工作完成之后，程序将rehashidx属性的值增一。</p>\n<p>4）随着字典操作的不断执行，最终在某个时间点上，ht[0]的所有键值对都会被rehash至ht[1]，这时程序将rehashidx属性的值设为-1，表示rehash操作已完成。</p>\n<p>渐进式rehash的好处在于它采取分而治之的方式，将rehash键值对所需的计算工作均摊到对字典的每个添加、删除、查找和更新操作上，从而避免了集中式rehash而带来的庞大计算量。</p>\n<p>另外，在渐进式rehash执行期间，新添加到字典的键值对一律**会被保存到ht[1]**里面，而ht[0]则不再进行任何添加操作，这一措施保证了ht[0]包含的键值对数量会只减不增，并随着rehash操作的执行而最终变成空表。</p>\n<h3 id=\"跳跃表\"><a href=\"#跳跃表\" class=\"headerlink\" title=\"跳跃表\"></a>跳跃表</h3><h4 id=\"示例图-3\"><a href=\"#示例图-3\" class=\"headerlink\" title=\"示例图\"></a>示例图</h4><p><img src=\"/./Redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E7%AC%94%E8%AE%B0/image-20211223121705566.png\" alt=\"image-20211223121705566\"></p>\n<p>Redis只在两个地方用到了跳跃表，一个是实现有序集合键，另一个是在集群节点中用作内部数据结构。</p>\n<p>每个跳跃表节点的层高都是1至32之间的随机数</p>\n<h3 id=\"整数集合\"><a href=\"#整数集合\" class=\"headerlink\" title=\"整数集合\"></a>整数集合</h3><p>整数集合（intset）是集合键的底层实现之一，当一个集合<strong>只包含整数值元素</strong>，并且这个集合的<strong>元素数量不多</strong>时，Redis就会使用整数集合作为集合键的底层实现。</p>\n<h4 id=\"示例图-4\"><a href=\"#示例图-4\" class=\"headerlink\" title=\"示例图\"></a>示例图</h4><p><img src=\"/./Redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E7%AC%94%E8%AE%B0/image-20211223122023914.png\" alt=\"image-20211223122023914\"></p>\n<p>当向一个底层为int16_t数组的整数集合添加一个int64_t类型的整数值时，整数集合已有的所有元素都会被转换成int64_t类型</p>\n<h4 id=\"升级\"><a href=\"#升级\" class=\"headerlink\" title=\"升级\"></a>升级</h4><p>类型：int16_t，int32_t，int64_t</p>\n<p>当向一个底层为int16_t数组的整数集合添加一个int64_t类型的整数值时，整数集合已有的所有元素都会被转换成int64_t类型；</p>\n<p>整数集合<strong>不支持降级</strong>操作，一旦对数组进行了升级，编码就会一直保持升级后的状态。</p>\n<p><strong>好处</strong>：整数集合的升级策略有两个好处，一个是提升整数集合的灵活性，另一个是尽可能地节约内存。</p>\n<h3 id=\"压缩列表\"><a href=\"#压缩列表\" class=\"headerlink\" title=\"压缩列表\"></a>压缩列表</h3><p>压缩列表（ziplist）是列表键和哈希键的底层实现之一。当一个列表键只包含少量列表项，并且每个列表项要么就是小整数值，要么就是长度比较短的字符串，那么Redis就会使用压缩列表来做列表键的底层实现</p>\n<h4 id=\"示例图-5\"><a href=\"#示例图-5\" class=\"headerlink\" title=\"示例图\"></a>示例图</h4><p><img src=\"/./Redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E7%AC%94%E8%AE%B0/image-20211223122749578.png\" alt=\"image-20211223122749578\"></p>\n<p><img src=\"/./Redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E7%AC%94%E8%AE%B0/image-20211223123006023.png\" alt=\"image-20211223123006023\"></p>\n<h4 id=\"连锁更新\"><a href=\"#连锁更新\" class=\"headerlink\" title=\"连锁更新\"></a>连锁更新</h4><p>每个节点的previous_entry_length属性都记录了前一个节点的长度：</p>\n<p>❑如果前一节点的长度小于254字节，那么previous_entry_length属性需要用1字节长的空间来保存这个长度值。</p>\n<p>❑如果前一节点的长度大于等于254字节，那么previous_entry_length属性需要用5字节长的空间来保存这个长度值。</p>\n<p><img src=\"/./Redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E7%AC%94%E8%AE%B0/image-20211223123127507.png\" alt=\"image-20211223123127507\"></p>\n<p><img src=\"/./Redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E7%AC%94%E8%AE%B0/image-20211223123242022.png\" alt=\"image-20211223123242022\"></p>\n<h3 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h3><p>Redis的对象系统还实现了基于引用计数技术的内存回收机制，当程序不再使用某个对象的时候，这个对象所占用的内存就会被自动释放；</p>\n<h4 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h4><p><img src=\"/./Redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E7%AC%94%E8%AE%B0/image-20211223123903740.png\" alt=\"image-20211223123903740\"></p>\n<p><img src=\"/./Redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E7%AC%94%E8%AE%B0/image-20211223123845793.png\" alt=\"image-20211223123845793\"></p>\n<h4 id=\"共享对象\"><a href=\"#共享对象\" class=\"headerlink\" title=\"共享对象\"></a>共享对象</h4><p>Redis只对包含整数值的字符串对象进行共享。</p>\n<p><img src=\"/./Redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E7%AC%94%E8%AE%B0/image-20211223124409476.png\" alt=\"image-20211223124409476\"></p>\n<p>假设键A创建了一个包含整数值100的字符串对象作为值对象，如果这时键B也要创建一个同样保存了整数值100的字符串对象作为值对象，那么服务器让键A和键B共享同一个字符串对象；</p>\n<p>Redis会在初始化服务器时，创建一万个字符串对象，这些对象包含了从0到9999的所有整数值，当服务器需要用到值为0到9999的字符串对象时，服务器就会使用这些共享对象，而不是新创建对象。</p>\n<h1 id=\"第二部分：单机数据库的实现\"><a href=\"#第二部分：单机数据库的实现\" class=\"headerlink\" title=\"第二部分：单机数据库的实现\"></a>第二部分：单机数据库的实现</h1><h2 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h2><h4 id=\"示例图-6\"><a href=\"#示例图-6\" class=\"headerlink\" title=\"示例图\"></a>示例图</h4><p><img src=\"/./Redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E7%AC%94%E8%AE%B0/image-20211224121242433.png\" alt=\"image-20211224121242433\"></p>\n<p><img src=\"/./Redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E7%AC%94%E8%AE%B0/image-20211224121349312.png\" alt=\"image-20211224121349312\"></p>\n<h4 id=\"过期时间\"><a href=\"#过期时间\" class=\"headerlink\" title=\"过期时间\"></a>过期时间</h4><p>保存过期时间</p>\n<p>redisDb结构的expires字典保存了数据库中所有键的过期时间，我们称这个字典为过期字典：</p>\n<p>❑过期字典的键是一个指针，这个指针指向键空间中的某个键对象（也即是某个数据库键）。</p>\n<p>❑过期字典的值是一个long long类型的整数，这个整数保存了键所指向的数据库键的过期时间——一个毫秒精度的UNIX时间戳。</p>\n<h5 id=\"过期键删除策略\"><a href=\"#过期键删除策略\" class=\"headerlink\" title=\"过期键删除策略\"></a>过期键删除策略</h5><p>Redis服务器实际使用的是<strong>惰性删除</strong>和<strong>定期删除</strong>两种策略：通过配合使用这两种删除策略，服务器可以很好地在合理使用CPU时间和避免浪费内存空间之间取得平衡。</p>\n<ul>\n<li><p>惰性删除</p>\n<p>操作键的时候判断一下键是否过期，如果过期了则删除键，并且按照键不存在的方式处理命令</p>\n</li>\n<li><p>定期删除<br>过期键的定期删除策略由redis.c&#x2F;activeExpireCycle函数实现，每当Redis的服务器周期性操作redis.c&#x2F;serverCron函数执行时，activeExpireCycle函数就会被调用，<strong>它在规定的时间内，分多次遍历服务器中的各个数据库</strong>，从数据库的expires字典中<strong>随机</strong>检查一部分键的过期时间，并删除其中的过期键。</p>\n</li>\n</ul>\n<h5 id=\"AOF、RDB和复制功能对过期键的处理\"><a href=\"#AOF、RDB和复制功能对过期键的处理\" class=\"headerlink\" title=\"AOF、RDB和复制功能对过期键的处理\"></a>AOF、RDB和复制功能对过期键的处理</h5><ul>\n<li><p>生成RDB文件<br>  在执行SAVE命令或者BGSAVE命令创建一个新的RDB文件时，程序会对数据库中的键进行检查，<strong>已过期的键不会被保存</strong>到新创建的RDB文件中。</p>\n</li>\n<li><p>载入RDB文件</p>\n<p>如果服务器以主服务器模式运行，那么在载入RDB文件时，程序会对文件中保存的键进行检查，未过期的键会被载入到数据库中，而<strong>过期键则会被忽略，所以过期键对载入RDB文件的主服务器不会造成影响</strong>。如果是从服务器模式的话会<strong>所有键都载入</strong>，但是因为进行数据同步的时候从服务器的数据库会被清空，所以不会对数据库造成影响。</p>\n</li>\n<li><p>AOF文件写入<br>当过期键被惰性删除或者定期删除之后，程序会向AOF文件追加（append）一条DEL命令，来显式地记录该键已被删除。</p>\n</li>\n<li><p>AOF重写<br>和生成RDB文件时类似，在执行AOF重写的过程中，程序会对数据库中的键进行检查，<strong>已过期的键不会被保存到重写后的AOF文件中。</strong></p>\n</li>\n<li><p>复制<br>主服务器在删除一个过期键之后，会显式地向所有从服务器发送一个DEL命令，告知从服务器删除这个过期键。从服务器只有在接到主服务器发来的DEL命令之后，才会删除过期键。</p>\n</li>\n</ul>\n<h2 id=\"RDB持久化\"><a href=\"#RDB持久化\" class=\"headerlink\" title=\"RDB持久化\"></a>RDB持久化</h2><p>RDB文件是一个经过压缩的二进制文件，由多个部分组成</p>\n<p>有两个Redis命令可以用于生成RDB文件，一个是SAVE，另一个是BGSAVE。</p>\n<ul>\n<li><p>SAVE<br>SAVE命令会阻塞Redis服务器进程，直到RDB文件创建完毕为止，在服务器进程阻塞期间，服务器不能处理任何命令请求</p>\n</li>\n<li><p>BGSAVE<br>BGSAVE命令会派生出一个子进程，然后由子进程负责创建RDB文件，服务器进程（父进程）继续处理命令请求</p>\n</li>\n</ul>\n<h3 id=\"RDB载入\"><a href=\"#RDB载入\" class=\"headerlink\" title=\"RDB载入\"></a>RDB载入</h3><p>启动的时候自动载入</p>\n<p>如果服务器开启了AOF持久化功能，那么服务器会<strong>优先使用AOF文件</strong>来还原数据库状态。只有在AOF持久化功能处于关闭状态时，服务器才会使用RDB文件来还原数据库状态。</p>\n<h3 id=\"自动保存\"><a href=\"#自动保存\" class=\"headerlink\" title=\"自动保存\"></a>自动保存</h3><p>因为BGSAVE命令可以在不阻塞服务器进程的情况下执行，所以Redis允许用户通过设置服务器配置的save选项，让服务器每隔一段时间自动执行一次BGSAVE命令。</p>\n<p><img src=\"/./Redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E7%AC%94%E8%AE%B0/image-20211224123718806.png\" alt=\"image-20211224123718806\"></p>\n<h4 id=\"实现方式\"><a href=\"#实现方式\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h4><p>数据库维护dirty计数器和lastsave属性</p>\n<p>Redis的服务器周期性操作函数<strong>serverCron</strong>默认每隔100毫秒就会执行一次，该函数用于对正在运行的服务器进行维护，它的其中一项工作就是检查save选项所设置的保存条件是否已经满足，如果满足的话，就执行BGSAVE命令。</p>\n<h2 id=\"AOF持久化\"><a href=\"#AOF持久化\" class=\"headerlink\" title=\"AOF持久化\"></a>AOF持久化</h2><h3 id=\"AOF文件的写入与同步\"><a href=\"#AOF文件的写入与同步\" class=\"headerlink\" title=\"AOF文件的写入与同步\"></a>AOF文件的写入与同步</h3><p>因为服务器在处理文件事件时可能会执行写命令，使得一些内容被追加到aof_buf缓冲区里面，所以在服务器每次结束一个事件循环之前，它都会调用fushAppendOnlyFile函数，考虑是否需要将aof_buf缓冲区中的内容写入和保存到AOF文件里面</p>\n<p><img src=\"/./Redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E7%AC%94%E8%AE%B0/image-20211227121109237.png\" alt=\"image-20211227121109237\"></p>\n<h3 id=\"AOF文件的载入与数据还原\"><a href=\"#AOF文件的载入与数据还原\" class=\"headerlink\" title=\"AOF文件的载入与数据还原\"></a>AOF文件的载入与数据还原</h3><p>Redis读取AOF文件并还原数据库状态的详细步骤如下：</p>\n<p>1）创建一个不带网络连接的伪客户端（fake client）</p>\n<p>2）从AOF文件中分析并读取出一条写命令。</p>\n<p>3）使用伪客户端执行被读出的写命令。</p>\n<p>4）一直执行步骤2和步骤3，直到AOF文件中的所有写命令都被处理完毕为止。</p>\n<h3 id=\"AOF重写\"><a href=\"#AOF重写\" class=\"headerlink\" title=\"AOF重写\"></a>AOF重写</h3><p>虽然Redis将生成新AOF文件替换旧AOF文件的功能命名为“AOF文件重写”，但实际上，AOF文件重写并不需要对现有的AOF文件进行任何读取、分析或者写入操作，这个功能是通过读取服务器当前的数据库状态来实现的。</p>\n<p>首先从数据库中读取键现在的值，然后用一条命令去记录键值对，代替之前记录这个键值对的多条命令，这就是AOF重写功能的实现原理。</p>\n<h3 id=\"AOF后台重写\"><a href=\"#AOF后台重写\" class=\"headerlink\" title=\"AOF后台重写\"></a>AOF后台重写</h3><p>Redis不希望AOF重写造成服务器无法处理请求，所以Redis决定将AOF重写程序放到子进程里执行。</p>\n<p>子进程在重写期间，父进程还在接收命令，会出现数据不一致的情况。为了解决这种数据不一致问题，Redis服务器设置了一个AOF重写缓冲区，这个缓冲区在服务器创建子进程之后开始使用，当Redis服务器执行完一个写命令之后，它会同时将这个写命令发送给AOF缓冲区和AOF重写缓冲区。</p>\n<p>当子进程完成AOF重写工作之后，它会向父进程发送一个信号，父进程在接到该信号之后，会调用一个信号处理函数，并执行以下工作：</p>\n<ol>\n<li>将AOF重写缓冲区中的所有内容写入到新AOF文件中，这时新AOF文件所保存的数据库状态将和服务器当前的数据库状态一致。</li>\n<li>对新的AOF文件进行改名，原子地（atomic）覆盖现有的AOF文件，完成新旧两个AOF文件的替换。</li>\n</ol>\n<h2 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h2><p>Redis服务器是一个事件驱动程序，服务器需要处理以下两类事件：</p>\n<ul>\n<li><p>文件事件（file event）：Redis服务器通过套接字与客户端（或者其他Redis服务器）进行连接，而文件事件就是服务器对套接字操作的抽象。服务器与客户端（或者其他服务器）的通信会产生相应的文件事件，而服务器则通过监听并处理这些事件来完成一系列网络通信操作。</p>\n</li>\n<li><p>时间事件（time event）：Redis服务器中的一些操作（比如serverCron函数）需要在给定的时间点执行，而时间事件就是服务器对这类定时操作的抽象。</p>\n</li>\n</ul>\n<h3 id=\"文件事件\"><a href=\"#文件事件\" class=\"headerlink\" title=\"文件事件\"></a>文件事件</h3><p><img src=\"/./Redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E7%AC%94%E8%AE%B0/image-20211227122435497.png\" alt=\"image-20211227122435497\"></p>\n<p>尽管多个文件事件可能会并发地出现，但I&#x2F;O多路复用程序总是会将所有产生事件的套接字都放到一个队列里面，然后通过这个队列，以有序（sequentially）、同步（synchronously）、每次一个套接字的方式向文件事件分派器传送套接字</p>\n<h4 id=\"文件事件的处理器\"><a href=\"#文件事件的处理器\" class=\"headerlink\" title=\"文件事件的处理器\"></a>文件事件的处理器</h4><p>Redis为文件事件编写了多个处理器，这些事件处理器分别用于实现不同的网络通信需求，比如说：</p>\n<ul>\n<li><p>为了对连接服务器的各个客户端进行应答，服务器要为监听套接字关联<strong>连接应答处理器</strong>。<br>当<strong>Redis服务器进行初始化</strong>的时候，程序会将这个连接应答处理器和服务器监听套接字的<strong>AE_READABLE</strong>事件关联起来，当有客户端用sys&#x2F;socket.h&#x2F;connect函数连接服务器监听套接字的时候，套接字就会产生AE_READABLE事件，引发连接应答处理器执行，并执行相应的套接字应答操作。</p>\n</li>\n<li><p>为了接收客户端传来的命令请求，服务器要为客户端套接字关联<strong>命令请求处理器</strong>。<br>当一个客户端<strong>通过连接应答处理器成功连接到服务器</strong>之后，服务器会将客户端套接字的<strong>AE_READABLE</strong>事件和命令请求处理器关联起来，当客户端向服务器发送命令请求的时候，套接字就会产生AE_READABLE事件，引发命令请求处理器执行，并执行相应的套接字读入操作。在客户端连接服务器的整个过程中，服务器都会一直为客户端套接字的AE_READABLE事件关联命令请求处理器。</p>\n</li>\n<li><p>为了向客户端返回命令的执行结果，服务器要为客户端套接字关联<strong>命令回复处理器</strong>。<br>当<strong>服务器有命令回复需要传送给客户端的时候</strong>，服务器会将客户端套接字的AE_WRITABLE事件和命令回复处理器关联起来，当客户端准备好接收服务器传回的命令回复时，就会产生AE_WRITABLE事件，引发命令回复处理器执行，并执行相应的套接字写入操作。当服务器有命令回复需要传送给客户端的时候，服务器会将客户端套接字的AE_WRITABLE事件和命令回复处理器关联起来。当命令回复发送完毕之后，服务器就会<strong>解除</strong>命令回复处理器与客户端套接字的AE_WRITABLE事件之间的关联。</p>\n</li>\n<li><p>当主服务器和从服务器进行复制操作时，主从服务器都需要关联特别为复制功能编写的复制处理器。</p>\n</li>\n</ul>\n<h3 id=\"时间事件\"><a href=\"#时间事件\" class=\"headerlink\" title=\"时间事件\"></a>时间事件</h3><p>Redis的时间事件分为以下两类：</p>\n<ul>\n<li><p>定时事件：让一段程序在指定的时间之后执行一次。比如说，让程序X在当前时间的30毫秒之后执行一次。</p>\n</li>\n<li><p>周期性事件：让一段程序每隔指定时间就执行一次。比如说，让程序Y每隔30毫秒就执行一次。</p>\n</li>\n</ul>\n<p>目前版本的Redis只使用周期性事件，而没有使用定时事件。</p>\n<h4 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h4><p>服务器将所有时间事件都放在一个无序链表中，每当时间事件执行器运行时，它就<strong>遍历整个链表</strong>，查找所有已到达的时间事件，并调用相应的事件处理器。</p>\n<p>在目前版本中，正常模式下的Redis服务器只使用serverCron一个时间事件，在这种情况下，服务器几乎是将<strong>无序链表退化成一个指针来使用</strong>，所以使用无序链表来保存时间事件，<strong>并不影响事件执行的性能</strong>。</p>\n<h2 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h2><p>Redis通过使用由I&#x2F;O多路复用技术实现的文件事件处理器，Redis服务器使用单线程单进程的方式来处理命令请求，并与多个客户端进行网络通信。</p>\n<p>Redis服务器状态结构的clients属性是一个链表，这个链表保存了所有与服务器连接的客户端的状态结构，对客户端执行批量操作，或者查找某个指定的客户端，都可以通过遍历clients链表来完成。</p>\n<h3 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h3><ol>\n<li>客户端的套接字描述符。</li>\n<li>客户端的名字。</li>\n<li>客户端的标志值（fag）。</li>\n<li>指向客户端正在使用的数据库的指针，以及该数据库的号码。</li>\n<li>客户端当前要执行的命令、命令的参数、命令参数的个数，以及指向命令实现函数的指针。</li>\n<li>客户端的输入缓冲区和输出缓冲区。</li>\n<li>客户端的复制状态信息，以及进行复制所需的数据结构。</li>\n<li>客户端执行BRPOP、BLPOP等列表阻塞命令时使用的数据结构。</li>\n<li>客户端的事务状态，以及执行WATCH命令时用到的数据结构。</li>\n<li>客户端执行发布与订阅功能时用到的数据结构。</li>\n<li>客户端的身份验证标志。</li>\n<li>客户端的创建时间，客户端和服务器最后一次通信的时间，以及客户端的输出缓冲区大小超出软性限制（soft limit）的时间。</li>\n</ol>\n<h3 id=\"示例图-7\"><a href=\"#示例图-7\" class=\"headerlink\" title=\"示例图\"></a>示例图</h3><p><img src=\"/./Redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E7%AC%94%E8%AE%B0/image-20220108142751976.png\" alt=\"image-20220108142751976\"></p>\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><p>通常情况下，Redis只会将那些对数据库进行了修改的命令写入到AOF文件，并复制到各个从服务器。如果一个命令没有对数据库进行任何修改，那么它就会被认为是只读命令，这个命令不会被写入到AOF文件，也不会被复制到从服务器。</p>\n<p>以上规则适用于绝大部分Redis命令，但PUBSUB命令和SCRIPT LOAD命令是其中的例外。PUBSUB命令虽然没有修改数据库，但PUBSUB命令向频道的所有订阅者发送消息这一行为带有副作用，接收到消息的所有客户端的状态都会因为这个命令而改变。因此，服务器需要使用REDIS_FORCE_AOF标志，强制将这个命令写入AOF文件，这样在将来载入AOF文件时，服务器就可以再次执行相同的PUBSUB命令，并产生相同的副作用。</p>\n<h3 id=\"伪客户端\"><a href=\"#伪客户端\" class=\"headerlink\" title=\"伪客户端\"></a>伪客户端</h3><ol>\n<li><p>Lua</p>\n<p>lua_client伪客户端在服务器运行的整个生命期中会一直存在，只有服务器被关闭时，这个客户端才会被关闭。</p>\n</li>\n<li><p>载入AOF文件</p>\n<p>服务器在载入AOF文件时，会创建用于执行AOF文件包含的Redis命令的伪客户端，并在载入完成之后，关闭这个伪客户端。</p>\n</li>\n</ol>\n<h2 id=\"服务器\"><a href=\"#服务器\" class=\"headerlink\" title=\"服务器\"></a>服务器</h2><h3 id=\"命令请求的执行过程（重要）\"><a href=\"#命令请求的执行过程（重要）\" class=\"headerlink\" title=\"命令请求的执行过程（重要）\"></a>命令请求的执行过程（重要）</h3><ol>\n<li><p>发送命令请求</p>\n<p><img src=\"/./Redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E7%AC%94%E8%AE%B0/image-20220108144056270.png\" alt=\"image-20220108144056270\"></p>\n</li>\n<li><p>读取命令请求<br>当客户端与服务器之间的<strong>连接套接字</strong>因为客户端的写入而变得<strong>可读</strong>时，服务器将调用<strong>命令请求处理器</strong>来执行以下操作：</p>\n<ul>\n<li>读取套接字中协议格式的命令请求，并将其保存到客户端状态的<strong>输入缓冲区</strong>里面。</li>\n<li>对输入缓冲区中的命令请求进行<strong>分析</strong>，提取出命令请求中包含的<strong>命令参数</strong>，以及命令参数的个数，然后分别将参数和参数个数保存到客户端状态的argv属性和argc属性里面。</li>\n<li>调用<strong>命令执行器</strong>，执行客户端指定的命令。</li>\n</ul>\n<p>命令执行器：</p>\n<ul>\n<li>去命令表查找<strong>命令的实现函数</strong></li>\n<li>执行预备操作：<ol>\n<li>检查参数是否正确； </li>\n<li>检查身份是否验证； </li>\n<li>检查内存使用情况</li>\n<li>检查是否在订阅模式，如果是，只会接收SUBSCRIBE、PSUBSCRIBE、UNSUBSCRIBE、PUNSUBSCRIBE四个命令</li>\n<li>检查是否在Lua脚本阻塞状态，如果是则拒绝命令</li>\n<li>检查是否在执行事务，如果是则只会执行EXEC、DISCARD、MULTI、WATCH四个命令</li>\n<li>检查服务器是否在进行数据载入，如果是则客户端发送的命令必须带有l标识（比如INFO、SHUTDOWN、PUBLISH等等）才会被服务器执行</li>\n</ol>\n</li>\n<li>调用<strong>命令的实现函数</strong>，并将结果放在输出缓冲区</li>\n<li>执行后续工作<ol>\n<li>记录慢查询日志</li>\n<li>记录aop文件</li>\n<li>如果有从服务器复制这个服务器，则会执行命令传播给所有从服务器</li>\n<li>记录调用次数</li>\n</ol>\n</li>\n</ul>\n</li>\n<li><p>将命令回复给客户端<br>当客户端套接字变为<strong>可写状态</strong>时，服务器就会执行<strong>命令回复处理器</strong>，将保存在客户端<strong>输出缓冲区</strong>中的命令回复发送给客户端。</p>\n</li>\n<li><p>客户端打印回复内容</p>\n</li>\n</ol>\n<h3 id=\"serverCron函数\"><a href=\"#serverCron函数\" class=\"headerlink\" title=\"serverCron函数\"></a>serverCron函数</h3><p>每100ms运行一次</p>\n<h4 id=\"作用：\"><a href=\"#作用：\" class=\"headerlink\" title=\"作用：\"></a>作用：</h4><ol>\n<li>更新服务器时间缓存<br>避免每次获取时间的时候都执行系统调用，直接在内存中维护了时间</li>\n<li>更新服务器每秒执行的次数</li>\n<li>更新服务器内存峰值记录</li>\n<li>处理SIGTERM信号</li>\n<li>管理客户端资源<br>如果客户端链接超时则会释放这个客户端；如果输入缓冲区的大小超过了一定的长度，则会释放当前的输入缓冲区，并重新创建一个，以防客户端的输入缓冲区耗费太多内存。</li>\n<li>管理数据库资源<br>删除过期键</li>\n<li>执行被延迟的BGREWRITEAOF</li>\n<li>将AOF缓冲区中的内容写入AOF文件</li>\n<li>关闭异步客户端</li>\n</ol>\n<h3 id=\"初始化服务器\"><a href=\"#初始化服务器\" class=\"headerlink\" title=\"初始化服务器\"></a>初始化服务器</h3><p>一个Redis服务器从启动到能够接受客户端的命令请求，需要经过一系列的初始化和设置过程，比如初始化服务器状态，接受用户指定的服务器配置，创建相应的数据结构和网络连接等等。</p>\n<h1 id=\"第三部分：多机数据库的实现\"><a href=\"#第三部分：多机数据库的实现\" class=\"headerlink\" title=\"第三部分：多机数据库的实现\"></a>第三部分：多机数据库的实现</h1><h2 id=\"复制\"><a href=\"#复制\" class=\"headerlink\" title=\"复制\"></a>复制</h2><p>在Redis中，用户可以通过执行SLAVEOF命令或者设置slaveof选项，让一个服务器去复制（replicate）另一个服务器，我们称呼被复制的服务器为主服务器（master），而对主服务器进行复制的服务器则被称为从服务器（slave）。</p>\n<h4 id=\"旧版复制功能\"><a href=\"#旧版复制功能\" class=\"headerlink\" title=\"旧版复制功能\"></a>旧版复制功能</h4><p>Redis的复制功能分为<strong>同步</strong>（sync）和<strong>命令传播</strong>（command propagate）两个操作：</p>\n<h5 id=\"同步\"><a href=\"#同步\" class=\"headerlink\" title=\"同步\"></a>同步</h5><p>从服务器对主服务器的同步操作需要通过向主服务器发送<strong>SYNC命令</strong>来完成，以下是SYNC命令的执行步骤：</p>\n<ol>\n<li>从服务器向主服务器发送SYNC命令。</li>\n<li>收到SYNC命令的主服务器执行BGSAVE命令，在<strong>后台</strong>生成一个RDB文件，并使用一个<strong>缓冲区记录从现在开始执行的所有写命令</strong>。</li>\n<li>当主服务器的BGSAVE命令执行完毕时，主服务器会将BGSAVE命令生成的RDB文件发送给从服务器，从服务器接收并载入这个RDB文件，将自己的数据库状态更新至主服务器执行BGSAVE命令时的数据库状态。</li>\n<li>主服务器将记录在缓冲区里面的所有写命令发送给从服务器，从服务器执行这些写命令，将自己的数据库状态更新至主服务器数据库当前所处的状态。</li>\n</ol>\n<p><img src=\"/./Redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E7%AC%94%E8%AE%B0/image-20220108150337037.png\" alt=\"image-20220108150337037\"></p>\n<h5 id=\"命令传播\"><a href=\"#命令传播\" class=\"headerlink\" title=\"命令传播\"></a>命令传播</h5><p>为了让主从服务器再次回到一致状态，主服务器需要对从服务器执行命令传播操作：主服务器会将自己执行的写命令，也即是造成主从服务器不一致的那条写命令，发送给从服务器执行，当从服务器执行了相同的写命令之后，主从服务器将再次回到一致状态。</p>\n<h5 id=\"缺陷\"><a href=\"#缺陷\" class=\"headerlink\" title=\"缺陷\"></a>缺陷</h5><p>SYNC命令是一个非常耗费资源的操作（主服务器需要生成RDB文件，从服务器需要载入RDB文件，网络需要传输RDB文件）；当从服务器断线重连之后，需要通过SYNC从头同步整个数据库。</p>\n<h4 id=\"新版复制功能\"><a href=\"#新版复制功能\" class=\"headerlink\" title=\"新版复制功能\"></a>新版复制功能</h4><p>使用PSYNC命令代替SYNC命令来执行复制时的同步操作。PSYNC命令具有完整重同步（full resynchronization）和部分重同步（partialresynchronization）两种模式。</p>\n<h5 id=\"完整重同步\"><a href=\"#完整重同步\" class=\"headerlink\" title=\"完整重同步\"></a>完整重同步</h5><p>用于初次复制的情况</p>\n<h5 id=\"部分重同步\"><a href=\"#部分重同步\" class=\"headerlink\" title=\"部分重同步\"></a>部分重同步</h5><p>主服务器维护一个固定长度的<strong>复制积压缓冲区</strong></p>\n<p>从服务器断线重新复制的时候，告诉主服务器复制的偏移量，主服务器如果发现断线期间新增的数据还在<strong>复制积压缓冲区</strong>中，则会执行部分重同步，否则执行完整重同步。</p>\n<p><img src=\"/./Redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E7%AC%94%E8%AE%B0/image-20220108150821262.png\" alt=\"image-20220108150821262\"></p>\n<h2 id=\"Sentinel\"><a href=\"#Sentinel\" class=\"headerlink\" title=\"Sentinel\"></a>Sentinel</h2><p>Sentinel（哨岗、哨兵）是Redis的<strong>高可用性</strong>（high availability）解决方案：由一个或多个Sentinel实例（instance）组成的Sentinel系统（system）可以监视任意多个主服务器，以及这些主服务器属下的所有从服务器，并在被监视的主服务器进入下线状态时，自动将下线主服务器属下的某个从服务器升级为新的主服务器，然后由新的主服务器代替已下线的主服务器继续处理命令请求。</p>\n<h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><h4 id=\"启动并初始化Sentinel\"><a href=\"#启动并初始化Sentinel\" class=\"headerlink\" title=\"启动并初始化Sentinel\"></a>启动并初始化Sentinel</h4><ol>\n<li><p>首先，因为Sentinel本质上只是一个运行在特殊模式下的Redis服务器，所以启动Sentinel的第一步，就是初始化一个普通的Redis服务器。</p>\n</li>\n<li><p>启动Sentinel的第二个步骤就是将一部分普通Redis服务器使用的代码替换成Sentinel专用代码</p>\n</li>\n<li><p>在应用了Sentinel的专用代码之后，接下来，服务器会初始化一个sentinel.c&#x2F;sentinelState结构（后面简称“Sentinel状态”），这个结构保存了服务器中所有和Sentinel功能有关的状</p>\n</li>\n<li><p>初始化Sentinel状态的masters属性</p>\n</li>\n<li><p>初始化Sentinel的最后一步是创建连向被监视主服务器的网络连接，Sentinel将成为主服务器的客户端，它可以向主服务器发送命令，并从命令回复中获取相关的信息。</p>\n</li>\n</ol>\n<h4 id=\"获取主服务器的信息\"><a href=\"#获取主服务器的信息\" class=\"headerlink\" title=\"获取主服务器的信息\"></a>获取主服务器的信息</h4><p>Sentinel默认会以每十秒一次的频率，通过命令连接向被监视的主服务器发送INFO命令，并通过分析INFO命令的回复来获取主服务器的当前信息。</p>\n<h4 id=\"获取从服务器的信息\"><a href=\"#获取从服务器的信息\" class=\"headerlink\" title=\"获取从服务器的信息\"></a>获取从服务器的信息</h4><p>当Sentinel发现主服务器有新的从服务器出现时，Sentinel除了会为这个新的从服务器创建相应的实例结构之外，Sentinel还会创建连接到从服务器的命令连接和订阅连接。在创建命令连接之后，Sentinel在默认情况下，会以每十秒一次的频率通过命令连接向从服务器发送INFO命令。</p>\n<h4 id=\"向主服务器和从服务器发送信息\"><a href=\"#向主服务器和从服务器发送信息\" class=\"headerlink\" title=\"向主服务器和从服务器发送信息\"></a>向主服务器和从服务器发送信息</h4><p>在默认情况下，Sentinel会以每两秒一次的频率，通过命令连接向所有被监视的主服务器和从服务器发送命令告诉监视的服务器自己的信息。</p>\n<h4 id=\"接收来自主服务器和从服务器的频道信息\"><a href=\"#接收来自主服务器和从服务器的频道信息\" class=\"headerlink\" title=\"接收来自主服务器和从服务器的频道信息\"></a>接收来自主服务器和从服务器的频道信息</h4><p>对于每个与Sentinel连接的服务器，Sentinel既通过命令连接向服务器的__sentinel__:hello频道发送信息，又通过订阅连接从服务器的__sentinel__:hello频道接收信息。</p>\n<p>对于监视同一个服务器的多个Sentinel来说，一个Sentinel发送的信息会被其他Sentinel接收到，这些信息会被用于更新其他Sentinel对发送信息Sentinel的认知，也会被用于更新其他Sentinel对被监视服务器的认知。</p>\n<p>因为一个Sentinel可以通过分析接收到的频道信息来<strong>获知其他Sentinel的存在</strong>，并通过发送频道信息来<strong>让其他Sentinel知道自己的存在</strong>，所以用户在使用Sentinel的时候并不需要提供各个Sentinel的地址信息，监视同一个主服务器的多个Sentinel<strong>可以自动发现对方</strong>。</p>\n<h4 id=\"创建连向其他Sentinel的命令连接\"><a href=\"#创建连向其他Sentinel的命令连接\" class=\"headerlink\" title=\"创建连向其他Sentinel的命令连接\"></a>创建连向其他Sentinel的命令连接</h4><p>当Sentinel通过频道信息发现一个新的Sentinel时，它不仅会为新Sentinel在sentinels字典中创建相应的实例结构，还会创建一个连向新Sentinel的<strong>命令连接</strong>，但不会创建<strong>订阅连接</strong>。</p>\n<h3 id=\"故障转移\"><a href=\"#故障转移\" class=\"headerlink\" title=\"故障转移\"></a>故障转移</h3><h4 id=\"检测主观下线\"><a href=\"#检测主观下线\" class=\"headerlink\" title=\"检测主观下线\"></a>检测主观下线</h4><p>在默认情况下，Sentinel会以每秒一次的频率向所有与它创建了命令连接的实例（包括主服务器、从服务器、其他Sentinel在内）发送PING命令，并通过实例返回的PING命令回复来判断实例是否在线。</p>\n<h4 id=\"检测客观下线\"><a href=\"#检测客观下线\" class=\"headerlink\" title=\"检测客观下线\"></a>检测客观下线</h4><p>当Sentinel将一个主服务器判断为主观下线之后，为了确认这个主服务器是否真的下线了，它会向同样监视这一主服务器的<strong>其他Sentinel进行询问</strong>，看它们是否也认为主服务器已经进入了下线状态（可以是主观下线或者客观下线）。当Sentinel从其他Sentinel那里接收到足够数量的已下线判断之后，Sentinel就会将从服务器判定为<strong>客观下线</strong>，并对主服务器<strong>执行故障转移操作</strong>。</p>\n<h4 id=\"选举领头Sentinel\"><a href=\"#选举领头Sentinel\" class=\"headerlink\" title=\"选举领头Sentinel\"></a>选举领头Sentinel</h4><p>当一个主服务器被判断为客观下线时，监视这个下线主服务器的各个Sentinel会进行协商，选举出一个领头Sentinel，并由领头Sentinel对下线主服务器执行故障转移操作。</p>\n<p>如果有某个Sentinel被半数以上的Sentinel设置成了局部领头Sentinel，那么这个Sentinel成为领头Sentinel</p>\n<h4 id=\"故障转移-1\"><a href=\"#故障转移-1\" class=\"headerlink\" title=\"故障转移\"></a>故障转移</h4><ol>\n<li>在已下线主服务器属下的所有从服务器里面，挑选出一个从服务器，并将其转换为主服务器。<br>选举策略：<ul>\n<li>删除不可用、或者有较长一段时间没有通信的从服务器；</li>\n<li>根据优先级比较高、复制偏移量比较大的从服务器中选；</li>\n<li>如果都一样，则选举<strong>运行id最小</strong>的那个从服务器；</li>\n</ul>\n</li>\n<li>让已下线主服务器属下的所有从服务器改为复制新的主服务器。</li>\n<li>将已下线主服务器设置为新的主服务器的从服务器，当这个旧的主服务器重新上线时，它就会成为新的主服务器的从服务器。</li>\n</ol>\n<h2 id=\"集群\"><a href=\"#集群\" class=\"headerlink\" title=\"集群\"></a>集群</h2><p>Redis集群是Redis提供的分布式数据库方案，集群通过分片（sharding）来进行数据共享，并提供复制和故障转移功能。</p>\n<h3 id=\"节点\"><a href=\"#节点\" class=\"headerlink\" title=\"节点\"></a>节点</h3><p>节点会继续使用redisServer结构来保存服务器的状态，使用redisClient结构来保存客户端的状态，至于那些只有在集群模式下才会用到的数据，节点将它们保存到了<strong>cluster.h&#x2F;clusterNode结构、cluster.h&#x2F;clusterLink结构，以及cluster.h&#x2F;clusterState结构</strong>里面。</p>\n<h4 id=\"集群数据结构\"><a href=\"#集群数据结构\" class=\"headerlink\" title=\"集群数据结构\"></a>集群数据结构</h4><ul>\n<li><p>clusterNode</p>\n<p><strong>clusterNode结构</strong>保存了一个节点的当前状态，比如节点的创建时间、节点的名字、节点当前的配置纪元、节点的IP地址和端口号。</p>\n</li>\n<li><p>clusterLink</p>\n<p>clusterNode结构的link属性是一个<strong>clusterLink结构</strong>，该结构保存了连接节点所需的有关信息，比如套接字描述符，输入缓冲区和输出缓冲区。<br>redisClient结构和clusterLink结构都有自己的套接字描述符和输入、输出缓冲区，这两个结构的区别在于，redisClient结构中的套接字和缓冲区是用于<strong>连接客户端</strong>的，而clusterLink结构中的套接字和缓冲区则是用于<strong>连接节点</strong>的。</p>\n</li>\n<li><p>clusterState<br>每个节点都保存着一个clusterState结构，这个结构记录了在当前节点的视角下，集群目前所处的状态，例如集群是在线还是下线，集群包含多少个节点，集群当前的配置纪元。</p>\n</li>\n</ul>\n<h3 id=\"槽指派\"><a href=\"#槽指派\" class=\"headerlink\" title=\"槽指派\"></a>槽指派</h3><p>Redis集群通过分片的方式来保存数据库中的键值对：集群的整个数据库被分为16384个槽（slot），数据库中的每个键都属于这16384个槽的其中一个，集群中的每个节点可以处理0个或最多16384个槽。</p>\n<p>当数据库中的16384个槽都有节点在处理时，集群处于上线状态（ok）；相反地，如果数据库中有任何一个槽没有得到处理，那么集群处于下线状态（fail）。</p>\n<p>通过向节点发送CLUSTER ADDSLOTS命令，我们可以将一个或多个槽指派（assign）给节点负责。</p>\n<p><strong>clusterNode结构</strong>的<strong>slots属性</strong>和numslot属性记录了节点负责处理哪些槽。</p>\n<h4 id=\"传播节点的槽指派信息\"><a href=\"#传播节点的槽指派信息\" class=\"headerlink\" title=\"传播节点的槽指派信息\"></a>传播节点的槽指派信息</h4><p>一个节点除了会将自己负责处理的槽记录在clusterNode结构的slots属性和numslots属性之外，它还会将自己的slots数组通过消息发送给集群中的其他节点，以此来告知其他节点自己目前负责处理哪些槽。</p>\n<p>当节点A通过消息从节点B那里接收到节点B的slots数组时，节点A会在自己的clusterState.nodes字典中查找节点B对应的clusterNode结构，并对结构中的slots数组进行<strong>保存或者更新</strong>。</p>\n<h4 id=\"记录集群所有槽的指派信息\"><a href=\"#记录集群所有槽的指派信息\" class=\"headerlink\" title=\"记录集群所有槽的指派信息\"></a>记录集群所有槽的指派信息</h4><p>clusterState结构中的slots数组记录了集群中所有16384个槽的指派信息</p>\n<p>slots数组包含16384个项，每个数组项都是一个指向clusterNode结构的指针：</p>\n<p><img src=\"/./Redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E7%AC%94%E8%AE%B0/image-20220108154212058.png\" alt=\"image-20220108154212058\"></p>\n<h4 id=\"注意-1\"><a href=\"#注意-1\" class=\"headerlink\" title=\"注意\"></a>注意</h4><p>clusterNode.slots数组和clusterState.slots数组都保存了槽指派信息；为什么分两份存，主要是考虑操作性能。</p>\n<h3 id=\"在集群中执行命令\"><a href=\"#在集群中执行命令\" class=\"headerlink\" title=\"在集群中执行命令\"></a>在集群中执行命令</h3><p>当客户端向节点发送与数据库键有关的命令时，接收命令的节点会计算出命令要处理的数据库键属于哪个槽，并检查这个槽是否指派给了自己：</p>\n<ol>\n<li><p>如果键所在的槽正好就指派给了当前节点，那么节点直接执行这个命令。</p>\n</li>\n<li><p>如果键所在的槽并没有指派给当前节点，那么节点会向客户端返回一个<strong>MOVED错误</strong>，指引客户端转向（redirect）至正确的节点，并再次发送之前想要执行的命令。</p>\n</li>\n</ol>\n<h3 id=\"节点数据库的实现\"><a href=\"#节点数据库的实现\" class=\"headerlink\" title=\"节点数据库的实现\"></a>节点数据库的实现</h3><p>集群节点保存键值对以及键值对过期时间的方式</p>\n<p>节点和单机服务器在数据库方面的一个区别是，<strong>节点只能使用0号数据库</strong>，而单机Redis服务器则没有这一限制。</p>\n<h3 id=\"复制与故障转移\"><a href=\"#复制与故障转移\" class=\"headerlink\" title=\"复制与故障转移\"></a>复制与故障转移</h3><p>Redis集群中的节点分为主节点（master）和从节点（slave），其中主节点用于处理槽，而从节点则用于复制某个主节点，并在被复制的主节点下线时，代替下线主节点继续处理命令请求。</p>\n<p>一个节点成为从节点，并开始复制某个主节点这一信息会通过消息发送给集群中的其他节点，最终集群中的所有节点都会知道某个从节点正在复制某个主节点。</p>\n<p>集群中的所有节点都会在代表主节点的clusterNode结构的slaves属性和numslaves属性中记录正在复制这个主节点的从节点名单。</p>\n<h4 id=\"故障检测\"><a href=\"#故障检测\" class=\"headerlink\" title=\"故障检测\"></a>故障检测</h4><p>集群中的每个节点都会定期地向集群中的其他节点发送PING消息，以此来检测对方是否在线，如果接收PING消息的节点没有在规定的时间内，向发送PING消息的节点返回PONG消息，那么发送PING消息的节点就会将接收PING消息的节点标记为<strong>疑似下线</strong>（probable fail，PFAIL）。</p>\n<p>如果在一个集群里面，<strong>半数</strong>以上负责处理槽的主节点都将某个主节点x报告为<strong>疑似下线</strong>，那么这个主节点x将被标记为<strong>已下线</strong></p>\n<h4 id=\"故障转移-2\"><a href=\"#故障转移-2\" class=\"headerlink\" title=\"故障转移\"></a>故障转移</h4><p>当一个从节点发现自己正在复制的主节点进入了已下线状态时，从节点将开始对下线主节点进行故障转移，以下是故障转移的执行步骤：</p>\n<ol>\n<li>复制下线主节点的所有从节点里面，会有一个从节点被选中。</li>\n<li>被选中的从节点会执行SLAVEOF no one命令，成为新的主节点。</li>\n<li>新的主节点会撤销所有对已下线主节点的槽指派，并将这些槽全部指派给自己。</li>\n<li>新的主节点向集群广播一条PONG消息，这条PONG消息可以让集群中的其他节点立即知道这个节点已经由从节点变成了主节点，并且这个主节点已经接管了原本由已下线节点负责处理的槽。</li>\n<li>新的主节点开始接收和自己负责处理的槽有关的命令请求，故障转移完成。</li>\n</ol>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}